{"version":3,"sources":["pages/component/NavBar.js","Firebase.js","pages/component/ResetPasswordDialog.js","styling/getStyles.js","pages/pageBody/Login.js","pages/Login.js","pages/pageBody/Register.js","pages/Register.js","pages/component/NewBoardDialog.js","pages/component/BoardsActions.js","pages/component/BoardCard.js","pages/component/BoardCardCollection.js","pages/pageBody/Boards.js","pages/Boards.js","pages/component/BoardBreadcrumbs.js","pages/component/EditTaskDialog.js","pages/component/NewColumnDialog.js","pages/component/SelectViewDialog.js","pages/component/NewViewDialog.js","pages/component/BoardUsersDialog.js","pages/component/BoardActions.js","pages/component/TaskListing.js","pages/component/EditColumnDialog.js","pages/component/Column.js","pages/component/ColumnGroup.js","pages/pageBody/Board.js","pages/Board.js","pages/component/BoardSubpageBreadcrumbs.js","pages/component/DeleteBoardDialog.js","pages/component/BoardSettings.js","pages/pageBody/BoardSettings.js","pages/BoardSettings.js","pages/component/BoardHistoryComponent.js","pages/pageBody/BoardHistory.js","pages/BoardHistory.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","showNavigation","includes","location","showBoardFeatures","startsWith","endsWith","history","useHistory","React","useState","caseSensitiveChecked","setCaseSensitiveChecked","menuAnchorEl","setMenuAnchorEl","handleMenuClick","sortMode","push","useEffect","searchTasks","searchInputElement","document","getElementById","searchInput","value","trim","toLowerCase","taskElements","getElementsByClassName","i","length","classList","remove","content","innerText","add","style","flexGrow","AppBar","position","Toolbar","variant","Typography","color","Button","href","marginLeft","TextField","placeholder","onChange","id","width","borderRadius","paddingLeft","paddingRight","backgroundColor","fade","Tooltip","title","arrow","ToggleButtonGroup","size","exclusive","event","newValue","ToggleButton","border","IconButton","edge","aria-label","aria-controls","aria-haspopup","onClick","currentTarget","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","localStorage","removeItem","FirebaseCache","db","subscriptions","boards","Map","tasks","colGroups","columns","this","boardId","has","get","sub","ReplaySubject","set","collection","doc","onSnapshot","boardRef","next","ref","taskRefs","columnGroupId","path","colGroupRef","columnRefs","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","currentUser","firestore","cache","Alert","elevation","onAuthStateChanged","user","ResetPasswordDialog","setOpen","resetPasswordEmailError","setResetPasswordEmailError","resetPasswordEmailHelperText","setResetPasswordEmailHelperText","resetPasswordSuccessSnackbar","setResetPasswordSuccessSnackbar","regexp","handleClose","clearState","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","error","helperText","autoFocus","margin","label","type","fullWidth","DialogActions","email","test","sendPasswordResetEmail","then","result","catch","Snackbar","autoHideDuration","severity","getStyles","makeStyles","theme","loginBody","loginPaper","padding","spacing","textAlign","palette","text","secondary","loginButton","marginRight","loginTextField","passwordStrengthBar","marginTop","Login","classes","loginEmailError","setLoginEmailError","loginEmailErrorHelperText","setLoginEmailErrorHelperText","loginPasswordError","setLoginPasswordError","loginPasswordErrorHelperText","setLoginPasswordErrorHelperText","loginErrorSnackbar","setloginErrorSnackbar","errorText","setErrorText","reason","className","Grid","container","justify","xs","item","Paper","password","signInWithEmailAndPassword","setItem","JSON","stringify","fetchSignInMethodsForEmail","err","message","signInWithPopup","to","createBrowserHistory","pathname","Register","uppercase","RegExp","numeric","special","firstPasswordError","setFirstPasswordError","firstPasswordHelperText","setFirstPasswordHelperText","secondPasswordError","setSecondPasswordError","secondPasswordHelperText","setSecondPasswordHelperText","emailError","setEmailError","emailHelperText","setEmailHelperText","errorSnackbar","setErrorSnackbar","successSnackbar","setSuccessSnackbar","passwordStrength","setPasswordStrength","scorePassword","score","bind","LinearProgress","repassword","createUserWithEmailAndPassword","console","log","code","defaultColumns","createBoard","name","description","a","Promise","res","rej","owner","defaultColumnGroup","userRefs","columnGroupRef","colRef","columnOrder","merge","NewBoardDialog","nameError","setNameError","nameHelperText","setNameHelperText","descriptionError","setDescriptionError","descriptionHelperText","setDescriptionHelperText","handleSubmit","ButtonGroup","rows","multiline","BoardsActions","Breadcrumbs","useStyles","paper","BoardCard","parse","getItem","boardPath","board","cursor","component","BoardCardCollection","state","userSub","subscribe","loadBoards","boardsSub","where","orderBy","boardsRefs","setState","docs","map","data","unsubscribe","key","Component","Boards","BoardBreadcrumbs","EditTaskDialog","titleError","setTitleError","titleHelperText","setTitleHelperText","descError","setDescError","descHelperText","setDescHelperText","dateError","setDateError","dateHelperText","setDateHelperText","columnError","setColumnError","columnHelperText","setColumnHelperText","checklistError","setChecklistError","checklistHelperText","setChecklistHelperText","checklistItems","setChecklistItems","clearChecklistErrors","InputLabelProps","shrink","checklistItem","completed","float","FormControl","FormGroup","index","FormControlLabel","control","Checkbox","defaultValue","checklistItemsCopy","slice","target","checked","handleChecklistItemStatusChange","splice","handleChecklistItemDelete","allColGroups","colGroup","InputLabel","Select","labelId","allCols","column","multiple","desc","date","valueAsDate","Date","getUTCFullYear","getUTCMonth","getUTCDate","columnElements","querySelectorAll","columnIds","columnElement","previousSibling","users","textContent","split","filter","hasError","Object","keys","today","setHours","checklist","taskRef","columnUpdates","forEach","colGroupId","update","FieldValue","arrayUnion","all","taskName","action","timestamp","database","ServerValue","NewColumnDialog","columnNames","columnName","runTransaction","t","colName","list","background","SelectViewDialog","Array","isArray","colGroupDisplay","List","ListItem","ListItemText","primary","join","NewViewDialog","setColumnNames","groupNames","clearColumnState","Divider","height","Chip","onDelete","groupName","BoardUsersDialog","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","Switch","disabled","userEmail","BoardActions","lockFunctionality","TaskListing","Card","marginBottom","CardContent","task","columnId","allColumnNames","dateFormat","toDate","button","ListItemIcon","checklistCopy","delete","EditColumnDialog","deleteDisable","setDeleteDisable","display","taskId","columnRef","Column","columnTaskRefs","sort","b","localeCompare","dateA","dateB","getTime","userInA","indexOf","GridListTile","overflow","ColumnGroup","columnGroup","j","maxWidth","flexWrap","justifyContent","GridList","Board","columnsSub","allColumns","loadBoard","boardSub","exists","loadColGroup","loadTasks","loadAllColGroups","colGroupSub","loadColumnGroup","loadColumns","limit","colGroupsSub","colGroupRefs","loadAllColumns","copy","assign","colSub","taskSub","c","viewableHistory","snapshot","match","params","search","substring","BoardSubpageBreadcrumbs","Link","currentPageName","DeleteBoardDialog","boardName","functions","httpsCallable","recursiveDelete","handleDeleteBoard","settingsBody","textField","chip","BoardSettings","inviteEmailError","setInviteEmailError","inviteEmailHelperText","setInviteEmailHelperText","successMessage","setSuccessMessage","user2","arrayRemove","undefined","BoardSettingsPage","tableIcons","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","icons","field","BoardHistory","BoardHistoryComponent","ProtectedRoute","render","RedirectRoute","App","window","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uhBAwLeA,MAlKf,SAAgBC,GACZ,IAAMC,GAAmB,CAAC,SAAU,aAAaC,SAASF,EAAMG,UAC1DC,EAAoBJ,EAAMG,SAASE,WAAW,WAAgC,YAAnBL,EAAMG,WAA2BH,EAAMG,SAASG,SAAS,cAAgBN,EAAMG,SAASG,SAAS,WAC5JC,EAAUC,cAHG,EAKqCC,IAAMC,UAAS,GALpD,mBAKZC,EALY,KAKUC,EALV,OAMqBH,IAAMC,SAAS,MANpC,mBAMZG,EANY,KAMEC,EANF,KAgBbC,EAAkB,SAACC,GACrBF,EAAgB,MAChBP,EAAQU,KAAKjB,EAAMG,SAAW,SAAWa,IAY7CP,IAAMS,WAAU,WACZC,MACD,CAACR,IAEJ,IAKMQ,EAAc,WAChB,IAAIC,EAAqBC,SAASC,eAAe,mBACjD,GAAKF,EAAL,CAGA,IAAIG,EAAcH,EAAmBI,MAAMC,OACtCd,IACDY,EAAcA,EAAYG,eAE9B,IAAMC,EAAeN,SAASO,uBAAuB,eAErD,GAAoB,KAAhBL,EACA,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACrCF,EAAaE,GAAGE,UAAUC,OAAO,kBACjCL,EAAaE,GAAGE,UAAUC,OAAO,0BAGrC,IAAK,IAAIH,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IAAK,CAC1C,IAAII,EAAUN,EAAaE,GAAGK,UACzBvB,IACDsB,EAAUA,EAAQP,eAElBO,EAAQ/B,SAASqB,IACjBI,EAAaE,GAAGE,UAAUC,OAAO,qBACjCL,EAAaE,GAAGE,UAAUI,IAAI,oBAE9BR,EAAaE,GAAGE,UAAUC,OAAO,kBACjCL,EAAaE,GAAGE,UAAUI,IAAI,yBAM9C,OACI,yBAAKC,MAAO,CAACC,SAAU,IACnB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACb,kBAACC,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,UAAUP,MAAO,CAACC,SAAU,IAA3D,YAEKpC,GACG,kBAAC2C,EAAA,EAAD,CAAQC,KAAK,UAAUF,MAAM,UAAUP,MAAO,CAACU,WAAY,IAA3D,WAGP1C,GAAqB,oCAClB,kBAAC2C,EAAA,EAAD,CAAWC,YAAY,kBAAkBC,SAAU,kBAAM9B,KAAe+B,GAAG,kBAAkBd,MAAO,CAACe,MAAO,MAAOC,aAAc,MAAUC,YAAa,EAAGC,aAAc,EAAGX,MAAO,UAAWY,gBAAiBC,YAAK,UAAW,KAAO,UAAW,CAACD,gBAAiBC,YAAK,UAAW,SACnR,kBAACC,EAAA,EAAD,CAASC,MAAM,mBAAmBC,OAAK,GACnC,kBAACC,EAAA,EAAD,CAAmBC,KAAK,QAAQC,WAAS,EAACtC,MAAOb,EAAsByB,MAAO,CAACmB,gBAAiB,WAAYN,SA3DjG,SAACc,EAAOC,GACvCpD,EAAwBoD,KA2DA,kBAACC,EAAA,EAAD,CAAczC,OAAO,EAAMY,MAAO,CAAC8B,OAAQ,EAAGvB,MAAO,UACjD,kBAAC,IAAD,SAIZ,kBAACc,EAAA,EAAD,CAASC,MAAM,aAAaC,OAAK,GAC7B,kBAACQ,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,OACX1B,MAAM,UACN2B,gBAAc,YACdC,gBAAc,OACdC,QA1FL,SAAAT,GACnBjD,EAAgBiD,EAAMU,iBA2FE,kBAAC,IAAD,QAGR,kBAACC,EAAA,EAAD,CACIxB,GAAG,YACHyB,SAAU9D,EACV+D,aAAW,EACXC,KAAMC,QAAQjE,GACdkE,QAhGA,WACpBjE,EAAgB,QAiGI,kBAACkE,EAAA,EAAD,CAAUR,QAAS,kBAAMzD,EAAgB,cAAzC,6BACA,kBAACiE,EAAA,EAAD,CAAUR,QAAS,kBAAMzD,EAAgB,eAAzC,8BACA,kBAACiE,EAAA,EAAD,CAAUR,QAAS,kBAAMzD,EAAgB,UAAzC,oBACA,kBAACiE,EAAA,EAAD,CAAUR,QAAS,kBAAMzD,EAAgB,WAAzC,2BAEgB,OAAnBf,EAAMgB,UACH,kBAACyC,EAAA,EAAD,CAASC,MAAM,0DAA0DC,OAAK,GAC1E,kBAACQ,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,SACX1B,MAAM,UACN6B,QApGX,WACjB1D,EAAgB,MAChBP,EAAQU,KAAKjB,EAAMG,YAoGS,kBAAC,IAAD,SAKfF,GAAkB,oCACf,kBAACwD,EAAA,EAAD,CAASC,MAAM,gBAAgBC,OAAK,GAChC,kBAACQ,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,gBACX1B,MAAM,UACNP,MAAO,CAACU,WAAY,KACpB,kBAAC,IAAD,QAGR,kBAACW,EAAA,EAAD,CAASC,MAAM,eAAeC,OAAK,GAC/B,kBAACQ,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,eACX1B,MAAM,WACN,kBAAC,IAAD,QAGR,kBAACc,EAAA,EAAD,CAASC,MAAM,UAAUC,OAAK,GAC1B,kBAACQ,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,UACX1B,MAAM,UACN6B,QArHb,WACXS,aAAaC,WAAW,QACxB3E,EAAQU,KAAK,YAoHW,kBAAC,IAAD,a,4GChK1BkE,G,WAQJ,WAAYC,GAAK,yBANjBC,cAAgB,GAMA,KALhBC,OAAS,IAAIC,IAKG,KAJhBC,MAAQ,IAAID,IAII,KAHhBE,UAAY,IAAIF,IAGA,KAFhBG,QAAU,IAAIH,IAGZI,KAAKP,GAAKA,E,sDAIFQ,GACR,GAAGD,KAAKL,OAAOO,IAAID,GACjB,OAAOD,KAAKL,OAAOQ,IAAIF,GAEvB,IAAIG,EAAM,IAAIC,IAAc,GAK5B,OAJAL,KAAKL,OAAOW,IAAIL,EAASG,GACzBJ,KAAKN,cAAcpE,KAAK0E,KAAKP,GAAGc,WAAW,UAAUC,IAAIP,GAASQ,YAAW,SAACC,GAC5EN,EAAIO,KAAKD,OAEJN,I,gCAIDM,GACR,GAAGV,KAAKH,MAAMK,IAAIQ,EAASnD,IACzB,OAAOyC,KAAKH,MAAMM,IAAIO,EAASnD,IAE/B,IAAI6C,EAAM,IAAIC,IAAc,GAK5B,OAJAL,KAAKH,MAAMS,IAAII,EAASnD,GAAI6C,GAC5BJ,KAAKN,cAAcpE,KAAKoF,EAASE,IAAIL,WAAW,SAASE,YAAW,SAACI,GACnET,EAAIO,KAAKE,OAEJT,I,sCAKKM,EAAUI,GACxB,IAAIC,EAAI,UAAML,EAASnD,GAAf,YAAqBuD,GAC7B,GAAGd,KAAKF,UAAUI,IAAIa,GACpB,OAAOf,KAAKF,UAAUK,IAAIY,GAE1B,IAAIX,EAAM,IAAIC,IAAc,GAK5B,OAJAL,KAAKF,UAAUQ,IAAIS,EAAMX,GACzBJ,KAAKN,cAAcpE,KAAKoF,EAASE,IAAIL,WAAW,gBAAgBC,IAAIM,GAAeL,YAAW,SAACO,GAC7FZ,EAAIO,KAAKK,OAEJZ,I,kCAKCY,GACV,GAAGhB,KAAKD,QAAQG,IAAIc,EAAYzD,IAC9B,OAAOyC,KAAKD,QAAQI,IAAIa,EAAYzD,IAEpC,IAAI6C,EAAM,IAAIC,IAAc,GAK5B,OAJAL,KAAKD,QAAQO,IAAIU,EAAYzD,GAAI6C,GACjCJ,KAAKN,cAAcpE,KAAK0F,EAAYJ,IAAIL,WAAW,WAAWE,YAAW,SAACQ,GACxEb,EAAIO,KAAKM,OAEJb,M,KAObc,IAASC,cAlFc,CACnBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBA2EZ,IAAMC,GAAW,IAAIV,IAASW,KAAKC,mBAC7BD,GAAOX,IAASW,OAChBE,GAAc,IAAI1B,IAAc,GAChCZ,GAAKyB,IAASc,YACdC,GAAQ,IAAIzC,GAAcC,IACxByB,KAAf,EC9EA,SAASgB,GAAM7H,GACX,OAAO,kBAAC,IAAD,eAAU8H,UAAW,EAAGrF,QAAQ,UAAazC,ID+ExDwH,GAAKO,oBAAmB,SAACC,GACvBN,GAAYpB,KAAK0B,MCEJC,OA/Ef,WAAgC,IAAD,EACHxH,IAAMC,UAAS,GADZ,mBACpBmE,EADoB,KACdqD,EADc,OAEmCzH,IAAMC,UAAS,GAFlD,mBAEpByH,EAFoB,KAEKC,EAFL,OAG6C3H,IAAMC,SAAS,IAH5D,mBAGpB2H,EAHoB,KAGUC,EAHV,OAI6C7H,IAAMC,UAAS,GAJ5D,mBAIpB6H,EAJoB,KAIUC,EAJV,KAKrBC,EAAS,uJAMTC,EAAc,WAChBR,GAAQ,GACRM,GAAgC,IAqB9BG,EAAa,WACfP,GAA2B,GAC3BE,EAAgC,IAChCE,GAAgC,IAGpC,OACI,6BACI,kBAAC5F,EAAA,EAAD,CAAQ4B,QAnCQ,WACpB0D,GAAQ,KAkCJ,oBACA,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,kBACA,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,6HAGA,kBAACjG,EAAA,EAAD,CACIkG,MAAOd,EACPe,WAAYb,EACZc,WAAS,EACTC,OAAO,QACPlG,GAAG,sBACHmG,MAAM,QACNC,KAAK,QACL7G,QAAQ,WACR8G,WAAS,KAGjB,kBAACC,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAAS,kBAjDDiF,EAiD8BpI,SAASC,eAAe,uBAAuBE,MAhDzGmH,SACc,KAAVc,GACArB,GAA2B,GAC3BE,EAAgC,sBACxBG,EAAOiB,KAAKD,IAIpBjC,GAAKmC,uBAAuBF,GAAOG,MAAK,SAAAC,GACpCnB,OACDoB,OAAM,SAAAb,OAGTT,GAAgC,KARhCJ,GAA2B,GAC3BE,EAAgC,sCAPxC,IAAgCmB,GAiDqF9G,MAAM,WAA3G,oBAKR,kBAACoH,EAAA,EAAD,CAAUlF,KAAM0D,EAA8BxD,QAAS2D,GACnD,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,WAA9D,yF,UC7DDC,GAzBG,WACd,OAAOC,cAAW,SAAAC,GAAK,MAAK,CACxBC,UAAW,CACPjB,OAAQ,IAEZkB,WAAY,CACRC,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACX9H,MAAOyH,EAAMM,QAAQC,KAAKC,WAE9BC,YAAa,CACTC,YAAa,EACbhI,WAAY,GAEhBiI,eAAgB,CACZ5H,MAAO,OAEX6H,oBAAqB,CACjBF,YAAa,MACbhI,WAAY,MACZmI,UAAW,SAnBZd,ICaX,SAAStC,GAAM7H,GACX,OAAO,kBAAC,IAAD,eAAU8H,UAAW,EAAGrF,QAAQ,UAAazC,IA2HzCkL,OAxHf,SAAelL,GACX,IAAMmL,EAAUjB,KACV3J,EAAUC,cAFE,EAI4BC,IAAMC,UAAS,GAJ3C,mBAIX0K,EAJW,KAIMC,EAJN,OAKgD5K,IAAMC,SAAS,IAL/D,mBAKX4K,EALW,KAKgBC,EALhB,OAMkC9K,IAAMC,UAAS,GANjD,mBAMX8K,EANW,KAMSC,EANT,OAOsDhL,IAAMC,SAAS,IAPrE,mBAOXgL,EAPW,KAOmBC,EAPnB,OAQkClL,IAAMC,UAAS,GARjD,mBAQXkL,EARW,KAQSC,EART,OASgBpL,IAAMC,SAAS,IAT/B,mBASXoL,EATW,KASAC,EATA,KAUZtD,EAAS,uJAiDTE,EAAa,WACf0C,GAAmB,GACnBE,EAA6B,IAC7BE,GAAsB,GACtBE,EAAgC,IAChCE,GAAsB,GACtBE,EAAa,KAGXrD,EAAc,SAAC3E,EAAOiI,GACT,cAAXA,GAIJH,GAAsB,IAG1B,OACI,yBAAKI,UAAWd,EAAQd,WACpB,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,GAAI,IACjC,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,EAAG6B,GAAI,GAC5B,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACE,EAAA,EAAD,CAAON,UAAWd,EAAQb,YACtB,oDACA,sHAGR,kBAAC4B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACE,EAAA,EAAD,CAAON,UAAWd,EAAQb,YACtB,sCACA,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CAAWG,GAAG,QAAQ+F,MAAOmC,EAAiBlC,WAAYoC,EAA2BjC,MAAM,QAAQC,KAAK,QAAQ7G,QAAQ,WAAWwJ,UAAWd,EAAQJ,kBAE1J,kBAACmB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CAAWG,GAAG,WAAW+F,MAAOuC,EAAoBtC,WAAYwC,EAA8BrC,MAAM,WAAW5G,QAAQ,WAAW6G,KAAK,WAAW2C,UAAWd,EAAQJ,kBAEzK,kBAACmB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACzJ,EAAA,EAAD,CAAQH,QAAQ,YAAYE,MAAM,UAAUsJ,UAAWd,EAAQN,YAAarG,QAAS,kBArFjFiF,EAqFkHpI,SAASC,eAAe,SAASE,MArF5IgL,EAqFmJnL,SAASC,eAAe,YAAYE,MApF9NmH,SACc,KAAVc,GACA4B,GAAmB,GACnBE,EAA6B,sBACrB9C,EAAOiB,KAAKD,GAGA,KAAb+C,GACPf,GAAsB,GACtBE,EAAgC,yBACzBa,EAAS1K,OAAS,GACzB2J,GAAsB,GACtBE,EAAgC,oDACzBa,EAAS1K,OAAS,KACzB2J,GAAsB,GACtBE,EAAgC,mDAEhCnE,GAAKiF,2BAA2BhD,EAAO+C,GAAU5C,MAAK,SAAAC,GAClD5E,aAAayH,QAAQ,OAAQC,KAAKC,UAAU/C,EAAO7B,OACnDzH,EAAQU,KAAK,cACd6I,OAAM,SAAAb,GACLzB,GAAKqF,2BAA2BpD,GAAOG,MAAK,SAAAC,GACtB,eAAdA,EAAO,IACPgC,GAAsB,GACtBE,EAAa,6EAEbF,GAAsB,GACtBE,EAAa,gEAElBjC,OAAM,SAAAgD,GACLjB,GAAsB,GACtBE,EAAae,EAAIC,gBA1BzB1B,GAAmB,GACnBE,EAA6B,sCAPF,IAAC9B,EAAO+C,IAqFX,UACA,kBAAC5J,EAAA,EAAD,CAAQH,QAAQ,YAAYwJ,UAAWd,EAAQN,YAAarG,QAhDpE,WACpBgD,GAAKwF,gBAAgBzF,IAAUqC,MAAK,SAAAC,GAChC5E,aAAayH,QAAQ,OAAQC,KAAKC,UAAU/C,EAAO7B,OACnDzH,EAAQU,KAAK,cACd6I,OAAM,SAAAb,GACL4C,GAAsB,GACtBE,EAAa9C,EAAM8D,cA0CK,uBAEJ,kBAACb,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC,IAAD,CAAMY,GAAG,aAAY,kBAACrK,EAAA,EAAD,CAAQH,QAAQ,YAAYE,MAAM,UAAUsJ,UAAWd,EAAQN,aAA/D,4BAEzB,kBAACqB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC,GAAD,YAOxB,kBAACtC,EAAA,EAAD,CAAUlF,KAAM+G,EAAoB7G,QAAS2D,GACzC,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,SACzD6B,MC/HN,YAAC9L,GACZ,IAAMO,EAAU2M,cAEhB,OACI,6BACI,kBAAC,EAAD,CAAQ/M,SAAUI,EAAQJ,SAASgN,WACnC,kBAAC,GAAD,Q,UCEZ,SAAStF,GAAM7H,GACX,OAAO,kBAAC,IAAD,eAAU8H,UAAW,EAAGrF,QAAQ,UAAazC,IAgMzCoN,OA7Lf,SAAkBpN,GACd,IAAMmL,EAAUjB,KAEVzB,EAAS,uJACT4E,EAAY,IAAIC,OAAO,eACvBC,EAAU,IAAID,OAAO,eACrBE,EAAU,IAAIF,OAAO,kBANN,EAO+B7M,IAAMC,UAAS,GAP9C,mBAOd+M,EAPc,KAOMC,EAPN,OAQyCjN,IAAMC,SAAS,IARxD,mBAQdiN,EARc,KAQWC,EARX,OASiCnN,IAAMC,UAAS,GAThD,mBASdmN,EATc,KASOC,EATP,OAU2CrN,IAAMC,SAAS,IAV1D,mBAUdqN,EAVc,KAUYC,EAVZ,OAWevN,IAAMC,UAAS,GAX9B,mBAWduN,EAXc,KAWFC,EAXE,OAYyBzN,IAAMC,SAAS,IAZxC,mBAYdyN,EAZc,KAYGC,EAZH,OAaqB3N,IAAMC,UAAS,GAbpC,mBAad2N,EAbc,KAaCC,EAbD,OAcyB7N,IAAMC,UAAS,GAdxC,mBAcd6N,EAdc,KAcGC,EAdH,OAe2B/N,IAAMC,SAAS,GAf1C,mBAed+N,EAfc,KAeIC,EAfJ,KAwDfC,EAAgB,SAACnC,GACnBkC,EAAoB,GACpB,IAAIE,EAAQ,EAgBZ,OAfIpC,EAAS1K,OAAS,IAClB8M,GAAS,IAETpC,EAAS1K,OAAS,KAClB8M,GAAS,IAETvB,EAAU3D,KAAK8C,KACfoC,GAAS,IAETrB,EAAQ7D,KAAK8C,KACboC,GAAS,IAETpB,EAAQ9D,KAAK8C,KACboC,GAAS,IAENA,GAGLjG,EAAa,WACf+E,GAAsB,GACtBE,EAA2B,IAC3BE,GAAuB,GACvBE,EAA4B,IAC5BE,GAAc,GACdE,EAAmB,IACnBI,GAAmB,GACnBF,GAAiB,IAGf5F,EAAc,SAAC3E,EAAOiI,GACT,cAAXA,IAIJsC,GAAiB,GACjBE,GAAmB,KAGvB,OACI,yBAAKvC,UAAWd,EAAQd,WACpB,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,GAAI,IACjC,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,EAAG6B,GAAI,GAC5B,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACE,EAAA,EAAD,CAAON,UAAWd,EAAQb,YACtB,oDACA,sHAMR,kBAAC4B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACE,EAAA,EAAD,CAAON,UAAWd,EAAQb,YACtB,wCACA,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIkG,MAAOgF,EACP/E,WAAYiF,EACZ9E,MAAM,QACNC,KAAK,QACL7G,QAAQ,WACRS,GAAG,QACH+I,UAAWd,EAAQJ,kBAG3B,kBAACmB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIE,SA5EH,WAC7B,IAAMuJ,EAAWnL,SAASC,eAAe,YAAYE,MACrDkN,EAAoBC,EAAcnC,KA0EiCqC,OACnC5F,MAAOwE,EACPvE,WAAYyE,EACZtE,MAAM,WACNC,KAAK,WACL7G,QAAQ,WACRS,GAAG,WACH+I,UAAWd,EAAQJ,iBAEvB,kBAAC+D,GAAA,EAAD,CACI7C,UAAWd,EAAQH,oBACnBvI,QAAQ,cACRjB,MAAOiN,EACP9L,MAAM,aAGd,kBAACuJ,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIkG,MAAO4E,EACP3E,WAAY6E,EACZ1E,MAAM,oBACNC,KAAK,WACL7G,QAAQ,WACRS,GAAG,aACH+I,UAAWd,EAAQJ,kBAG3B,kBAACmB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACzJ,EAAA,EAAD,CACIH,QAAQ,YACRE,MAAM,UACNsJ,UAAWd,EAAQN,YACnBrG,QAAS,kBA9IzBiF,EAgJwBpI,SAASC,eAAe,SAASE,MAhJlDgL,EAiJiBnL,SAASC,eAAe,YAAYE,MAjJ3CuN,EAkJO1N,SAASC,eAAe,cAAcE,MAjJ9EmH,SACc,KAAVc,GACAyE,GAAc,GACdE,EAAmB,sBACX3F,EAAOiB,KAAKD,GAGb+C,EAAS1K,OAAS,GACzB4L,GAAsB,GACtBE,EAA2B,+CACpBpB,EAAS1K,OAAS,KACzB4L,GAAsB,GACtBE,EAA2B,wDACpBpB,IAAauC,GACpBrB,GAAsB,GACtBE,EAA2B,wBAC3BE,GAAuB,GACvBE,EAA4B,yBAE5BxG,GAAKwH,+BAA+BvF,EAAO+C,GAAU5C,MAAK,SAAAC,GACtD2E,GAAmB,MACpB1E,OAAM,SAAAb,GACLgG,QAAQC,IAAIjG,GACO,8BAAfA,EAAMkG,MACNjB,GAAc,GACdE,EAAmB,mEAEnBE,GAAiB,OAtBzBJ,GAAc,GACdE,EAAmB,sCAPR,IAAC3E,EAAO+C,EAAUuC,IA0IL,kBAoBxB,kBAAChF,EAAA,EAAD,CAAUlF,KAAM0J,EAAiBxJ,QAAS2D,GACtC,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,WAA9D,kCAIJ,kBAACF,EAAA,EAAD,CAAUlF,KAAMwJ,EAAetJ,QAAS2D,GACpC,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,WAA9D,8CCjMD,YAACjK,GACZ,IAAMO,EAAU2M,cAEhB,OACI,6BACI,kBAAC,EAAD,CAAQ/M,SAAUI,EAAQJ,SAASgN,WACnC,kBAAC,GAAD,Q,iDCANiC,GAAiB,CAAC,UAAU,cAAc,YAAY,YAEtDC,GAAW,yCAAG,WAAOC,EAAMC,GAAb,UAAAC,EAAA,+EACT,IAAIC,SAAQ,SAACC,EAAIC,GACpBvK,GAAGc,WAAW,UAAU/D,IAAI,CACxByN,MAAOpI,GAAKE,YAAY+B,MACxBJ,MAAOiG,EACPC,YAAaA,EACbM,mBAAoB,GACpBrJ,SAAU,GACVsJ,SAAU,CAACtI,GAAKE,YAAY+B,SAC7BG,MAAK,SAACvD,GACL,OAAOA,EAASH,WAAW,gBAAgB/D,IAAI,CAC3CkH,MAAO,qBAEZO,KAXH,yCAWQ,WAAOmG,GAAP,8BAAAP,EAAA,sDACA5I,EAAa,GADb,8BAEgBwI,GAFhB,yEAEO1L,EAFP,kBAGmBqM,EAAe7J,WAAW,WAAW/D,IAAI,CACxDkH,MAAO3F,EACP8C,SAAU,KALd,QAGIwJ,EAHJ,OAOApJ,EAAW3F,KAAK+O,EAAO9M,IAPvB,8RASE6M,EAAe9J,IAAI,CACrBgK,YAAarJ,GACd,CAACsJ,OAAO,IAXP,4EAXR,uDAuBGtG,MAAK,WACJ8F,OACD5F,OAAM,SAACgD,GACN6C,EAAI7C,UA5BI,2CAAH,wDAkIEqD,OAhGnB,WAA2B,IAAD,EACE1P,IAAMC,UAAS,GADjB,mBACfmE,EADe,KACTqD,EADS,OAGYzH,IAAMC,UAAS,GAH3B,mBAGf0P,EAHe,KAGJC,EAHI,OAIsB5P,IAAMC,SAAS,IAJrC,mBAIf4P,EAJe,KAICC,EAJD,OAK0B9P,IAAMC,UAAS,GALzC,mBAKf8P,EALe,KAKGC,EALH,OAMoChQ,IAAMC,SAAS,IANnD,mBAMfgQ,EANe,KAMQC,EANR,KAYhBjI,EAAc,SAAC4G,EAAKC,GACtBrH,GAAQ,IAGN0I,EAAY,yCAAG,+BAAApB,EAAA,sDAMjB,GALMF,EAAOjO,SAASC,eAAe,gBAAgBE,MAAMC,OACrD8N,EAAclO,SAASC,eAAe,uBAAuBE,MAAMC,OAEzEkH,IAEa,KAAT2G,EACAe,GAAa,GACbE,EAAkB,+BACf,GAAIjB,EAAKxN,OAAS,GACrBuO,GAAa,GACbE,EAAkB,wDACf,GAAIhB,EAAYzN,OAAS,IAC5B2O,GAAoB,GACpBE,EAAyB,mEAEzB,IACIzI,GAAQ,GACRmH,GAAYC,EAAKC,GAAazF,OAAM,SAACgD,GAASmC,QAAQhG,MAAM6D,MAC9D,MAAOA,GACL5E,GAAQ,GACRmI,GAAa,GACbE,EAAkB,+BAtBT,2CAAH,qDA2BZ5H,EAAa,WACf0H,GAAa,GACbE,EAAkB,IAClBE,GAAoB,GACpBE,EAAyB,KAG7B,OACI,6BACI,kBAACE,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQ4B,QA7CI,WACpB0D,GAAQ,KA4CA,cAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,aACA,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,yCAGA,kBAACjG,EAAA,EAAD,CACAoG,WAAS,EACTC,OAAO,QACPlG,GAAG,eACHmG,MAAM,aACN5G,QAAQ,WACR8G,WAAS,EACTN,MAAOmH,EACPlH,WAAYoH,IAEZ,kBAACvN,EAAA,EAAD,CACAqG,OAAO,QACPlG,GAAG,sBACHmG,MAAM,+BACNyH,KAAK,IACLrO,QAAQ,WACRsO,WAAS,EACTxH,WAAS,EACTN,MAAOuH,EACPtH,WAAYwH,KAGhB,kBAAClH,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAASoM,EAAcjO,MAAM,WAArC,oBChHLqO,OAff,SAAuBhR,GACnB,OACI,kBAACkM,EAAA,EAAD,CAAMC,WAAS,EAAC/J,MAAO,CAACmI,QAAS,uBAC7B,yBAAKnI,MAAO,CAACC,SAAU,IACnB,kBAAC4O,GAAA,EAAD,CAAa5M,aAAW,eACpB,kBAAC3B,EAAA,EAAD,CAAYC,MAAM,eAAlB,YAKR,kBAAC,GAAD,QCVNuO,GAAY/G,cAAW,SAAAC,GAAK,MAAK,CACnC+G,MAAO,CACH5G,QAASH,EAAMI,QAAQ,QAiChB4G,OA7Bf,SAAmBpR,GACf,IAAMmL,EAAU+F,KACV3Q,EAAUC,cACVwH,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAEvCC,EAAY,UAAYvR,EAAMwR,MAAMtO,GAK1C,OACI,kBAACgJ,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GACX,kBAACE,EAAA,EAAD,CAAON,UAAWd,EAAQgG,MAAO/O,MAAO,CAACqP,OAAQ,WAAYjN,QAN/C,WAClBjE,EAAQU,KAAKsQ,KAML,kBAAC7O,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,KAAKtP,MAAO,CAACqI,UAAW,WACtDzK,EAAMwR,MAAMnI,OAEjB,kBAAC3G,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,IAAI7N,KAAK,QAAQzB,MAAO,CAACqI,UAAW,WACrEzK,EAAMwR,MAAM5B,QAAU5H,EAAKyB,MAAQ,WAAa,GAChDzJ,EAAMwR,MAAM1B,SAAShO,OAF1B,gBAE+C9B,EAAMwR,MAAM1B,SAAShO,OAAS,EAAI,IAAM,IAEvF,kBAACY,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KAClC,6BAC6B,KAA5B1R,EAAMwR,MAAMjC,YAAqB,4BAA8BvP,EAAMwR,MAAMjC,gBCmBjFoC,G,YA1CX,WAAY3R,GAAQ,IAAD,8BACf,4CAAMA,KACD4R,MAAQ,GACb,EAAKC,QAAUnK,GAAYoK,WAAU,SAAC9J,GAClC,EAAK+J,WAAW/J,MAJL,E,wEAQRA,GAAO,IAAD,OACTrC,KAAKqM,WACLrM,KAAKqM,YAGTrM,KAAKqM,UAAY5M,GAAGc,WAAW,UAAU+L,MAAM,WAAY,iBAAkBjK,EAAKyB,OAAOyI,QAAQ,QAAS,OAAO9L,YAAW,SAAC+L,GACzH,EAAKC,SAAS,CAACD,WAAYA,EAAWE,KAAKC,KAAI,SAAAjM,GAC3C,IAAIkM,EAAOlM,EAASkM,OAEpB,OADAA,EAAKrP,GAAKmD,EAASnD,GACZqP,Y,6CAMf5M,KAAKqM,WAAarM,KAAKqM,YACvBrM,KAAKkM,SAAWlM,KAAKkM,QAAQW,gB,+BAI7B,OACI,yBAAKpQ,MAAO,CAACe,MAAO,MAAUiG,OAAQ,uBAClC,kBAAC8C,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACpB7E,KAAKiM,MAAMO,YAAc,oCACrBxM,KAAKiM,MAAMO,WAAWG,KAAI,SAAAd,GAAK,OAC5B,kBAAC,GAAD,CAAWiB,IAAKjB,EAAMtO,GAAIsO,MAAOA,c,GAtC3B/Q,IAAMiS,WCMzBC,OATf,SAAgB3S,GACZ,OACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,QCHG,YAACA,GACZ,IAAMO,EAAU2M,cAEhB,OACI,6BACI,kBAAC,EAAD,CAAQ/M,SAAUI,EAAQJ,SAASgN,WACnC,kBAAC,GAAD,QCOGyF,OAbf,SAA0B5S,GACtB,OACI,kBAACiR,GAAA,EAAD,CAAa5M,aAAW,eACpB,kBAAC,IAAD,CAAM4I,GAAG,UAAUtK,MAAM,WAAzB,UAGA,kBAACD,EAAA,EAAD,CAAYC,MAAM,eACb3C,EAAMwR,MAAQxR,EAAMwR,MAAMnI,MAAQ,M,+GCqXpCwJ,OA3Wf,SAAwB7S,GAAQ,IAAD,EACHS,IAAMC,UAAS,GADZ,mBACpBmE,EADoB,KACdqD,EADc,OAESzH,IAAMC,UAAS,GAFxB,mBAEpBoS,EAFoB,KAERC,EAFQ,OAGmBtS,IAAMC,SAAS,IAHlC,mBAGpBsS,EAHoB,KAGHC,EAHG,OAIOxS,IAAMC,UAAS,GAJtB,mBAIpBwS,EAJoB,KAITC,EAJS,OAKiB1S,IAAMC,SAAS,IALhC,mBAKpB0S,EALoB,KAKJC,EALI,OAMO5S,IAAMC,UAAS,GANtB,mBAMpB4S,EANoB,KAMTC,EANS,OAOiB9S,IAAMC,SAAS,IAPhC,mBAOpB8S,EAPoB,KAOJC,EAPI,OAQWhT,IAAMC,UAAS,GAR1B,mBAQpBgT,EARoB,KAQPC,EARO,OASqBlT,IAAMC,SAAS,IATpC,mBASpBkT,EAToB,KASFC,EATE,OAUiBpT,IAAMC,UAAS,GAVhC,mBAUpBoT,EAVoB,KAUJC,EAVI,OAW2BtT,IAAMC,SAAS,IAX1C,mBAWpBsT,GAXoB,KAWCC,GAXD,QAYiBxT,IAAMC,SAAS,IAZhC,qBAYpBwT,GAZoB,MAYJC,GAZI,MAcrBnM,GAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SASvC5I,GAAc,WAChBR,GAAQ,IAuHNS,GAAa,WACfoK,GAAc,GACdE,EAAmB,IACnBU,GAAe,GACfE,EAAoB,IACpBV,GAAa,GACbE,EAAkB,IAClBE,GAAa,GACbE,EAAkB,KAGhBW,GAAuB,WACzBL,GAAkB,GAClBE,GAAuB,KAG3B,OACI,oCACI,kBAACpD,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,iBAAY5C,EAAZ,CAAmBwE,QAlJP,WACpBmE,KACAyL,KACAD,GAAkB,IAClBjM,GAAQ,MA8IA,aAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,GAAaG,kBAAgB,qBACtD,kBAACE,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,kBAIJ,kBAACxF,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIoG,WAAS,EACTC,OAAO,QACPlG,GAAG,YACHmG,MAAM,QACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAO6J,EACP5J,WAAY8J,KAGpB,kBAAC9G,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,kBACHmG,MAAM,cACNyH,KAAK,IACLrO,QAAQ,WACRsO,WAAS,EACTxH,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOiK,EACPhK,WAAYkK,KAGpB,kBAAClH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,cACHmG,MAAM,WACNC,KAAK,OACL7G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOqK,EACPpK,WAAYsK,KAGpB,kBAACtH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,WACHmG,MAAM,QACNC,KAAK,OACL7G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,MAGlC,kBAACpI,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,cAIJ,kBAACxF,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,gBACHmG,MAAM,qBACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BlS,MAAO,CAACe,MAAO,OACf8F,MAAO6K,EACP5K,WAAY8K,KAEhB,kBAAC7P,EAAA,EAAD,CAAYK,QA9HL,WAC3B,IAAI+P,EAAgBlT,SAASC,eAAe,iBAAiBE,MAAMC,OAEnE2S,KAEsB,KAAlBG,GACAR,GAAkB,GAClBE,GAAuB,mCAChBM,EAAczS,OAAS,KAC9BiS,GAAkB,GAClBE,GAAuB,qDAEvBE,GAAkB,GAAD,oBAAKD,IAAL,CAAqB,CAACvJ,KAAM4J,EAAeC,WAAW,MACvEnT,SAASC,eAAe,iBAAiBE,MAAQ,KAiHY6C,aAAW,qBAAqBjC,MAAO,CAACqS,MAAO,UACxF,kBAAC,KAAD,QAGPP,GAAepS,OAAS,GACrB,kBAACoK,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACqI,GAAA,EAAD,CAAahD,UAAU,YACnB,kBAACiD,GAAA,EAAD,KACKT,GAAe5B,KAAI,SAACiC,EAAeK,GAAhB,OAChB,kBAAC1I,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GAAIoG,IAAKmC,GACpB,kBAACC,GAAA,EAAD,CACIC,QAAS,kBAACC,GAAA,EAAD,CAAUC,aAAcT,EAAcC,UAAWhQ,QAAS,SAACT,GAAD,OAxH3E,SAACA,EAAO6Q,GAC5C,IAAIK,EAAqBf,GAAegB,MAAM,GAC9CD,EAAmBL,GAAOJ,UAAYzQ,EAAMoR,OAAOC,QACnDjB,GAAkBc,GAqHwGI,CAAgCtR,EAAO6Q,MACrHvL,MAAOkL,EAAc5J,OAEzB,kBAACxG,EAAA,EAAD,CAAYK,QAAS,kBArH/B,SAACoQ,GAC/B,IAAIK,EAAqBf,GAAegB,MAAM,GAC9CD,EAAmBK,OAAOV,EAAO,GACjCT,GAAkBc,GAkHiDM,CAA0BX,KACjD,kBAAC,KAAD,cAQ5B,kBAAC1I,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,8BAIH1R,EAAMwV,cAAgBxV,EAAMwV,aAAalD,KAAI,SAACmD,GAAD,OAC1C,yBAAKhD,IAAKgD,EAASvS,GAAId,MAAO,CAACe,MAAO,SACjCyQ,GACG,kBAAC1H,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,UAAUE,MAAM,aAC/BiR,IAIb,kBAAC1H,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACqI,GAAA,EAAD,CAAajC,IAAKgD,EAASvS,GAAId,MAAO,CAACe,MAAO,SAC1C,kBAACuS,GAAA,EAAD,CAAYxS,GAAI,qBAAuBuS,EAASvS,IAAhD,cAAgEuS,EAASlD,OAAOlJ,OAChF,kBAACsM,GAAA,EAAD,CACIzS,GAAIuS,EAASvS,GACbqG,WAAS,EACTyL,aAAa,GACb5L,OAAO,QACPwM,QAAS,qBAAuBH,EAASvS,GACzC+F,MAAOyK,EACPpE,KAAK,mBAEL,kBAACtK,EAAA,EAAD,CAAUxD,MAAM,IAAhB,UAGAxB,EAAM6V,SAAW7V,EAAM6V,QAAQJ,EAASvS,KAAOlD,EAAM6V,QAAQJ,EAASvS,IAAIoP,KAAI,SAACwD,GAAD,OAC3E,kBAAC9Q,EAAA,EAAD,CAAUyN,IAAKqD,EAAO5S,GAAI1B,MAAOsU,EAAO5S,IACnC4S,EAAOvD,OAAOlJ,iBAQ1C,kBAAC6C,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACqI,GAAA,EAAD,CAAatS,MAAO,CAACe,MAAO,SACxB,kBAACuS,GAAA,EAAD,CAAYxS,GAAG,qBAAf,SACA,kBAACyS,GAAA,EAAD,CACIzS,GAAG,YACHmG,MAAM,QACN0M,UAAQ,EACR3M,OAAO,QACPG,WAAS,EACTyL,aAAc,GACd5S,MAAO,CAAC6I,UAAW,IACnB2K,QAAQ,qBAER5V,EAAMwR,MAAM1B,UAAY9P,EAAMwR,MAAM1B,SAASwC,KAAI,SAACtK,GAAD,OAC9C,kBAAChD,EAAA,EAAD,CAAUyN,IAAKzK,EAAMxG,MAAOwG,GACvBA,SAMpB,kBAACkE,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,mBAIJ,kBAACxF,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,mBACHmG,MAAM,eACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,MAGlC,kBAACpI,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,iBACHmG,MAAM,aACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,QAK1C,kBAAC9K,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,IAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAvUH,WACjB,IAAI6E,EAAQhI,SAASC,eAAe,aAAaE,MAAMC,OACnDuU,EAAO3U,SAASC,eAAe,mBAAmBE,MAAMC,OACxDwU,EAAO5U,SAASC,eAAe,eAAe4U,YAGtC,MAARD,IACAA,EAAO,IAAIE,KAAKF,EAAKG,iBAAkBH,EAAKI,cAAeJ,EAAKK,eAGpE,IAAIC,EAAiBlV,SAASmV,iBAAiB,4BAC3C9Q,EAAU,GACV+Q,EAAY,GAZO,uBAavB,YAA0BF,EAA1B,+CAA0C,CAAC,IAAlCG,EAAiC,QACV,KAAxBA,EAAclV,QACdkE,EAAQgR,EAAcC,gBAAgBzT,IAAMwT,EAAclV,MAC1DiV,EAAUxV,KAAKyV,EAAclV,SAhBd,kFAoBvB,IACIoV,EADevV,SAASC,eAAe,aAClBuV,YAAYC,MAAM,MAC3CF,EAAQA,EAAMG,QAAO,SAAA/O,GAAI,OAAIA,EAAKvG,OAAOK,OAAS,KAElD6G,KACA,IAAIqO,GAAW,EAEV3N,EAAMvH,SACPkV,GAAW,EACXjE,GAAc,GACdE,EAAmB,sBAEnB5J,EAAMvH,OAAS,MACfkV,GAAW,EACXjE,GAAc,GACdE,EAAmB,2CAEnB+C,EAAKlU,OAAS,MACdkV,GAAW,EACX7D,GAAa,GACbE,EAAkB,kDAEjB4D,OAAOC,KAAKxR,GAAS5D,SACtBkV,GAAW,EACXrD,GAAe,GACfE,EAAoB,oCAExB,IAAMsD,EAAQ,IAAIhB,KAClBgB,EAAMC,SAAS,EAAG,EAAG,EAAG,GACX,OAATnB,GAAiBA,EAAOkB,IACxBH,GAAW,EACXzD,GAAa,GACbE,EAAkB,+BAGjBuD,IACD9O,GAAQ,GAGRlI,EAAMqG,SAASE,IAAIL,WAAW,SAAS/D,IAAI,CACvCuB,MAAO2F,EACP2M,KAAMA,EACNC,KAAMA,EACNW,MAAOA,EACPhQ,WAAY6P,EACZY,UAAWnD,KACZtK,MAAK,SAAC0N,GACL,IAAIC,EAAgB,GAQpB,OAPAN,OAAOC,KAAKxR,GAAS8R,SAAQ,SAACC,GAC1BF,EAActW,KACVjB,EAAMqG,SAASE,IAAIL,WAAW,gBAAgBC,IAAIsR,GAAYvR,WAAW,WAAWC,IAAIT,EAAQ+R,IAAaC,OAAO,CAChHlR,SAAUK,GAASc,UAAUgQ,WAAWC,WAAWN,EAAQpU,UAIhEuM,QAAQoI,IAAIN,MACpB3N,MAAK,SAAAC,GACJ,OAAOzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,WAAW/D,IAAI,CACxE6F,KAAMA,GAAKyB,MACXqO,SAAUzO,EACV0O,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,iBAEtCpO,OAAM,SAAAgD,GAAG,OAAImC,QAAQhG,MAAM,wBAAyB6D,QAoPhBnK,MAAM,WAArC,mBChQLwV,OA5Gf,SAAyBnY,GAAQ,IAAD,EACJS,IAAMC,UAAS,GADX,mBACrBmE,EADqB,KACfqD,EADe,OAEMzH,IAAMC,UAAS,GAFrB,mBAErB0P,EAFqB,KAEVC,EAFU,OAGgB5P,IAAMC,SAAS,IAH/B,mBAGrB4P,EAHqB,KAGLC,EAHK,KAKtBvI,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAEvC8G,EAAc,GAPQ,uBAQ5B,YAAmBpY,EAAM0F,QAAzB,+CAAkC,CAAC,IAA1BoQ,EAAyB,QAC9BsC,EAAYnX,KAAK6U,EAAOzM,QATA,kFAY5B,IAKMX,EAAc,WAChBR,GAAQ,IAGN0I,EAAY,yCAAG,6BAAApB,EAAA,sDACX6I,EAAahX,SAASC,eAAe,cAAcE,MAAMC,OAE/DkH,IAEmB,KAAf0P,GACAhI,GAAa,GACbE,EAAkB,4BACX8H,EAAWvW,OAAS,IAC3BuO,GAAa,GACbE,EAAkB,gDACX6H,EAAYlY,SAASmY,IAC5BhI,GAAa,GACbE,EAAkB,mCAElBrI,GAAQ,GAER9C,GAAGkT,eAAH,yCAAkB,WAAOC,GAAP,oBAAA/I,EAAA,sEACapK,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,gBAAgBC,IAAInG,EAAM+P,eAAe7M,IADhH,cACV6M,EADU,gBAEKA,EAAe7J,WAAW,WAAW/D,IAAI,CACxDkH,MAAOgP,EACP7R,SAAU,KAJA,cAEVwJ,EAFU,gBAOWD,EAAejK,MAP1B,cAOVmK,EAPU,OAOiCsC,OAAOtC,aAC1ChP,KAAK+O,EAAO9M,IARV,UAUR6M,EAAe2H,OAAO,CACxB,YAAezH,IAXL,4CAAlB,uDAaGrG,MAAK,SAAAC,GACJzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,WAAW/D,IACjE,CACI6F,KAAMA,EAAKyB,MACX+O,QAASH,EACTN,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,6BAA+BpC,UAvCtC,2CAAH,qDA6CZnE,EAAa,WACf0H,GAAa,GACbE,EAAkB,KAGtB,OACI,oCACI,kBAACM,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,iBAAY5C,EAAZ,CAAmBwE,QA9DP,WACpBmE,IACAT,GAAQ,MA4DA,eAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,cACA,kBAAC6F,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIoG,WAAS,EACTjG,GAAG,aACHmG,MAAM,cACN5G,QAAQ,WACR8G,WAAS,EACTH,OAAO,QACPiL,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOmH,EACPlH,WAAYoH,OAK5B,kBAAC9G,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAASoM,EAAcjO,MAAM,WAArC,qB,8BClGduO,GAAY/G,cAAW,SAAAC,GAAK,MAAK,CACnCqO,KAAM,CACFlV,gBAAiB6G,EAAMM,QAAQgO,WAAWvH,WAiEnCwH,OA7Df,SAA0B3Y,GACtB,IAAMmL,EAAU+F,KADa,EAGLzQ,IAAMC,UAAS,GAHV,mBAGtBmE,EAHsB,KAGhBqD,EAHgB,KASvBQ,EAAc,WAChBR,GAAQ,IAGRzC,EAAYmT,MAAMC,QAAQ7Y,EAAMwV,cAAgBxV,EAAMwV,aAAe,GACrEK,EAAU+C,MAAMC,QAAQ7Y,EAAM6V,SAAW7V,EAAM6V,QAAU,GACzDiD,EAAkBrT,EAAU6M,KAAI,SAACmD,EAAUb,GAC3C,GAAIiB,EAAQ/T,QAAU8S,EAClB,MAAO,CACHvL,MAAOoM,EAASpM,MAChBnG,GAAIuS,EAASvS,GACbkV,YAAa,IAGrB,IAAIA,EAAcvC,EAAQjB,GAAOtC,KAAI,SAAAwD,GAAM,OAAIA,EAAOzM,SACtD,MAAO,CACHA,MAAOoM,EAASpM,MAChBnG,GAAIuS,EAASvS,GACbkV,YAAaA,MAIrB,OACI,6BACI,kBAACvH,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQ4B,QA7BI,WACpB0D,GAAQ,KA4BA,gBAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,eACA,kBAAC6F,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC0M,GAAA,EAAD,CAAM9M,UAAWd,EAAQsN,MACpBK,EAAgBxG,KAAI,SAACmD,EAAUb,GAAX,OACjB,kBAACoE,GAAA,EAAD,CAAUvG,IAAKgD,EAASvS,IACpB,kBAAC+V,GAAA,EAAD,CAAcC,QAASzD,EAASpM,MAAOuB,UAAW6K,EAAS2C,YAAYe,KAAK,gBAOpG,kBAAC3P,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,c,oBC2FL0Q,OArJf,SAAuBpZ,GAAQ,IAAD,EACFS,IAAMC,UAAS,GADb,mBACnBmE,EADmB,KACbqD,EADa,OAGQzH,IAAMC,UAAS,GAHvB,mBAGnB0P,EAHmB,KAGRC,EAHQ,OAIkB5P,IAAMC,SAAS,IAJjC,mBAInB4P,EAJmB,KAIHC,EAJG,OAKY9P,IAAMC,UAAS,GAL3B,mBAKnBgT,EALmB,KAKNC,EALM,OAMsBlT,IAAMC,SAAS,IANrC,mBAMnBkT,EANmB,KAMDC,EANC,OAOYpT,IAAMC,SAAS,IAP3B,mBAOnB0X,EAPmB,KAONiB,EAPM,KAUtBC,GADeV,MAAMC,QAAQ7Y,EAAMwV,cAAgBxV,EAAMwV,aAAe,IAC9ClD,KAAI,SAAAmD,GAAQ,OAAIA,EAASpM,SAQjDX,EAAc,WAChBR,GAAQ,IA4CNS,EAAa,WACf0H,GAAa,GACbE,EAAkB,IAClBgJ,KAGEA,EAAmB,WACrB5F,GAAe,GACfE,EAAoB,KAGxB,OACI,6BACI,kBAAChD,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQ4B,QAjEI,WACpBmE,IACA0Q,EAAe,IACfnR,GAAQ,KA8DA,aAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,YACA,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,wCAGA,kBAACjG,EAAA,EAAD,CACIoG,WAAS,EACTjG,GAAG,cACHmG,MAAM,YACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOmH,EACPlH,WAAYoH,IAEhB,kBAACkJ,GAAA,EAAD,CAASpX,MAAO,CAACgH,OAAQ,MACzB,kBAACJ,EAAA,EAAD,0HAEI,6BAAM,6BAFV,oHAKA,kBAACkD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CACIG,GAAG,gBACHmG,MAAM,cACN5G,QAAQ,WACR4R,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOyK,EACPxK,WAAY0K,EACZxR,MAAO,CAACe,MAAO,SAEnB,kBAACP,EAAA,EAAD,CACIH,QAAQ,YACRE,MAAM,UACNP,MAAO,CAACqX,OAAQ,OAAQtW,MAAO,OAC/BqB,QA5EJ,WACpB,IAAM6T,EAAahX,SAASC,eAAe,iBAAiBE,MAAMC,OAClE8X,IAEmB,KAAflB,GACA1E,GAAe,GACfE,EAAoB,gCACbwE,EAAWvW,OAAS,IAC3B6R,GAAe,GACfE,EAAoB,gDACbuE,EAAYlY,SAASmY,IAC5B1E,GAAe,GACfE,EAAoB,mCAEpBwF,EAAe,GAAD,oBAAKjB,GAAL,CAAkBC,KAChChX,SAASC,eAAe,iBAAiBE,MAAQ,MAyDjC,SAUP4W,EAAYtW,OAAS,GAAM,oCACxB,kBAAC0X,GAAA,EAAD,CAASpX,MAAO,CAACgH,OAAQ,MACzB,kBAACJ,EAAA,EAAD,qBAGA,kBAACkD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACV+L,EAAY9F,KAAI,SAAAwD,GAAM,OACnB,kBAAC4D,GAAA,EAAD,CAAMrQ,MAAOyM,EAAQrD,IAAKqD,EAAQ6D,SAAU,kBAvEhDtB,EAuEyEvC,OAtEjGuD,EAAejB,EAAYlD,MAAM,GAAG6B,QAAO,SAAAzK,GAAI,OAAIA,IAAS+L,MADrC,IAACA,GAuEkFjW,MAAO,CAACU,WAAY,EAAGgI,YAAa,YAMtI,kBAACtB,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAtHH,WACjB,IAAMoV,EAAYvY,SAASC,eAAe,eAAeE,MAAMC,OAC/DkH,IAEkB,KAAdiR,GACAvJ,GAAa,GACbE,EAAkB,8BACXqJ,EAAU9X,OAAS,IAC1BuO,GAAa,GACbE,EAAkB,8CACX+I,EAAWpZ,SAAS0Z,IAC3BvJ,GAAa,GACbE,EAAkB,gCAElBtB,QAAQC,IAAI,6BAwG2BvM,MAAM,WAArC,mB,sEC/DLkX,OAzEf,SAA0B7Z,GACtB,IAAMgI,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SADhB,EAEL7Q,IAAMC,UAAS,GAFV,mBAEtBmE,EAFsB,KAEhBqD,EAFgB,KAQvBQ,EAAc,WAChBR,GAAQ,IAGZ,OACI,6BACI,kBAAC2I,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQ4B,QAXI,WACpB0D,GAAQ,KAUA,kBAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,qBAAuDlD,EAAMwR,MAAMnI,OACnE,kBAACN,EAAA,EAAD,KACK/I,EAAMwR,MAAM5B,QAAU5H,EAAKyB,OACxB,kBAACT,EAAA,EAAD,gGAC4F,uBAAGnG,KAAM,UAAY7C,EAAMqG,SAASnD,GAAK,aAAzC,kBAD5F,UAIJ,kBAAC4W,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOlW,KAAK,SACR,kBAACmW,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,aACA,kBAACA,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,CAAWC,MAAM,SAAjB,cAGR,kBAACC,GAAA,EAAD,KACI,kBAACH,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,KACKla,EAAMwR,OAAS,oCACZ,kBAACkI,GAAA,EAAD,CAAMrQ,MAAOrJ,EAAMwR,MAAM5B,MAAOjN,MAAM,cAG9C,kBAACuX,GAAA,EAAD,CAAWC,MAAM,SACb,kBAACE,GAAA,EAAD,CAAQjF,SAAS,EAAMkF,UAAU,EAAM3X,MAAM,cAGpD3C,EAAMwR,OAASxR,EAAMwR,MAAM1B,UAAY,oCACnC9P,EAAMwR,MAAM1B,SAASiH,QAAO,SAAAwD,GAAS,OAAIA,IAAcva,EAAMwR,MAAM5B,SAAO0C,KAAI,SAAAiI,GAAS,OACpF,kBAACN,GAAA,EAAD,CAAUxH,IAAK8H,GACX,kBAACL,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,KACI,kBAACR,GAAA,EAAD,CAAMrQ,MAAOkR,EAAW5X,MAAM,UAAU8P,IAAK8H,EAAW9X,QAAQ,cAEpE,kBAACyX,GAAA,EAAD,CAAWC,MAAM,SACb,kBAACE,GAAA,EAAD,CAAQjF,SAAS,EAAOkF,UAAU,EAAM3X,MAAM,sBAS9E,kBAAC6G,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,aCnCL8R,OAlCf,SAAsBxa,GAClB,IAAMgI,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAE7C,OACI,kBAACpF,EAAA,EAAD,CAAMC,WAAS,EAAC/J,MAAO,CAACmI,QAAS,uBAC7B,yBAAKnI,MAAO,CAACC,SAAU,IACnB,kBAAC,GAAD,CAAkBmP,MAAOxR,EAAMwR,SAElCxR,EAAMwR,OACH,kBAACX,GAAA,EAAD,CAAahN,KAAK,UACZ7D,EAAMya,mBAAqB,oCACzB,kBAAC,GAAD,CAAgBpU,SAAUrG,EAAMqG,SAAUmL,MAAOxR,EAAMwR,MAAO9L,QAAS1F,EAAM0F,QAAS8P,aAAcxV,EAAMwV,aAAcK,QAAS7V,EAAM6V,UACvI,kBAAC,GAAD,CAAiBxP,SAAUrG,EAAMqG,SAAU0J,eAAgB/P,EAAM+P,eAAgBrK,QAAS1F,EAAM0F,UAChG,kBAAC,GAAD,CAAeW,SAAUrG,EAAMqG,SAAUmL,MAAOxR,EAAMwR,MAAOgE,aAAcxV,EAAMwV,gBAErF,kBAAC,GAAD,CAAkBnP,SAAUrG,EAAMqG,SAAUmL,MAAOxR,EAAMwR,MAAOgE,aAAcxV,EAAMwV,aAAcK,QAAS7V,EAAM6V,UACjH,kBAAChF,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,kBAEJ,kBAAC,GAAD,CAAkByD,SAAUrG,EAAMqG,SAAUmL,MAAOxR,EAAMwR,QACzD,kBAACX,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQC,KAAM,UAAY7C,EAAMqG,SAASnD,GAAK,YAA9C,YAEH8E,GAAQhI,EAAMwR,MAAM5B,QAAU5H,EAAKyB,OAChC,kBAACoH,GAAA,EAAD,CAAahN,KAAK,SACd,kBAACjB,EAAA,EAAD,CAAQC,KAAM,UAAY7C,EAAMqG,SAASnD,GAAK,aAA9C,gB,4FCgLbwX,OA1Lf,SAAqB1a,GAAQ,IAAD,EACAS,IAAMC,UAAS,GADf,mBACjBmE,EADiB,KACXqD,EADW,KAGlBF,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAMvC5I,EAAc,WAChBR,GAAQ,IA8BZ,OACI,kBAACyS,GAAA,EAAD,CAAMlY,QAAQ,WAAWL,MAAO,CAACwY,aAAc,IAC3C,kBAACC,GAAA,EAAD,CAAarW,QArCG,WACpB0D,GAAQ,IAoCmC9F,MAAO,CAACqP,OAAQ,WAAYxF,UAAU,eACzE,kBAACvJ,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAC9B1R,EAAM8a,KAAKpX,MAAM5B,OAAS,GAAK9B,EAAM8a,KAAKpX,MAAQ1D,EAAM8a,KAAKpX,MAAMwR,MAAM,EAAG,IAAM,OAEvF,kBAACxS,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KACjC1R,EAAM8a,KAAK9E,KAAKlU,OAAS,IAAM9B,EAAM8a,KAAK9E,KAAOhW,EAAM8a,KAAK9E,KAAKd,MAAM,EAAG,KAAO,QAG1F,kBAACtM,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAqBlD,EAAM8a,KAAKpX,OAChD,kBAACqF,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,eAGA,kBAAChP,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KACb,KAApB1R,EAAM8a,KAAK9E,KAAchW,EAAM8a,KAAK9E,KAAO,8BAGpD,kBAAC9J,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,GACX,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,WAGC1R,EAAM8a,KAAKlU,WAAW0L,KAAI,SAAAyI,GAAQ,OAC/B,kBAACrB,GAAA,EAAD,CAAMjH,IAAKsI,EAAU1R,MAAOrJ,EAAMgb,eAAeD,GAAWpY,MAAM,UAAUkB,KAAK,QAAQzB,MAAO,CAACgH,OAAQ,cAIrH,kBAAC8C,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,YAGA,kBAAChP,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KACb,OAApB1R,EAAM8a,KAAK7E,MACR,gBAEiB,OAApBjW,EAAM8a,KAAK7E,MAAkB,oCACzBgF,KAAWjb,EAAM8a,KAAK7E,KAAKiF,SAAU,cACtC,kBAACtY,EAAA,EAAD,CAAQH,QAAQ,WAAWoB,KAAK,QAAQlB,MAAM,UAAUP,MAAO,CAACqS,MAAO,UAAvE,wBAKhB,kBAACvI,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,SAG6B,IAA5B1R,EAAM8a,KAAKlE,MAAM9U,QACd,kBAACY,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KAAtC,+BAIH1R,EAAM8a,KAAKlE,MAAM9U,OAAS,GAAK9B,EAAM8a,KAAKlE,MAAMtE,KAAI,SAAAtK,GAAI,OACrD,kBAAC0R,GAAA,EAAD,CAAMjH,IAAKzK,EAAMqB,MAAOrB,EAAMrF,MAAM,UAAUkB,KAAK,QAAQzB,MAAO,CAACgH,OAAQ,eAK3F,kBAAC8C,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,aAGA,kBAACqH,GAAA,EAAD,CAAMrH,UAAU,OACZ,kBAACsH,GAAA,EAAD,CAAUmC,QAAM,GACd,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACnC,GAAA,EAAD,CAAcC,QAAQ,+BAExB,kBAACM,GAAA,EAAD,MACA,kBAACR,GAAA,EAAD,CAAUmC,QAAM,GACd,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACnC,GAAA,EAAD,CAAcC,QAAQ,8BAExB,kBAACM,GAAA,EAAD,MACA,kBAACR,GAAA,EAAD,CAAUmC,QAAM,GACd,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACnC,GAAA,EAAD,CAAcC,QAAQ,gCAIhC,kBAAChN,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,eAGG1R,EAAM8a,KAAKzD,YAAcuB,MAAMC,QAAQ7Y,EAAM8a,KAAKzD,YAA8C,IAAhCrX,EAAM8a,KAAKzD,UAAUvV,SACpF,kBAACY,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KAAtC,yCAIH1R,EAAM8a,KAAKzD,WAAauB,MAAMC,QAAQ7Y,EAAM8a,KAAKzD,YAAcrX,EAAM8a,KAAKzD,UAAUvV,OAAS,GAC1F,kBAAC4S,GAAA,EAAD,CAAahD,UAAU,YACnB,kBAACiD,GAAA,EAAD,KACK3U,EAAM8a,KAAKzD,UAAU/E,KAAI,SAACiC,EAAeK,GAAhB,OACtB,kBAACC,GAAA,EAAD,CACIpC,IAAKmC,EACLE,QAAS,kBAACC,GAAA,EAAD,CAAUK,QAASb,EAAcC,UAAWhQ,QAAS,SAACT,GAAD,OAnHlE,SAACA,EAAO6Q,GAC5C,IAAIyG,EAAgBrb,EAAM8a,KAAKzD,UAAUnC,MAAM,GAC/CmG,EAAczG,GAAOJ,UAAYzQ,EAAMoR,OAAOC,QAC9CpV,EAAMqG,SAASE,IAAIL,WAAW,SAASC,IAAInG,EAAMsX,QAAQpU,IAAIwU,OAAO,CAChEL,UAAWgE,IA+GkGhG,CAAgCtR,EAAO6Q,MAChHvL,MAAOkL,EAAc5J,aAO7C,kBAACuB,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC3J,EAAA,EAAD,CAAYD,QAAQ,KAAKiP,UAAU,MAAnC,YAGA,kBAAChP,EAAA,EAAD,CAAYD,QAAQ,QAAQiP,UAAU,KAAtC,2BAMZ,kBAAClI,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,yBAGE1I,EAAMya,mBAAqB,oCACzB,kBAAC7X,EAAA,EAAD,CAAQ4B,QA7JP,WACjBY,GAAGkT,eAAH,yCAAkB,WAAOC,GAAP,UAAA/I,EAAA,sDACdxP,EAAMqG,SAASE,IAAIL,WAAW,SAASC,IAAInG,EAAMsX,QAAQpU,IAAIoY,SAD/C,2CAAlB,uDAEG1R,MAAK,SAAAC,GACJoF,QAAQC,IAAIlP,EAAM8a,KAAKpX,OACvB0B,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,WAAW/D,IACjE,CACI6F,KAAMA,EAAKyB,MACXqO,SAAU9X,EAAM8a,KAAKpX,MACrBqU,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,8BAAgCpC,SAGpD5E,GAAQ,IA6IuCvF,MAAM,aAArC,UAGA,kBAACC,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,SAIJ,kBAAC9F,EAAA,EAAD,CAAQ4B,QAASkE,EAAa/F,MAAM,WAApC,a,qBCvBL4Y,OAvKf,SAA0Bvb,GAAQ,IAAD,EACLS,IAAMC,UAAS,GADV,mBACtBmE,EADsB,KAChBqD,EADgB,OAEKzH,IAAMC,UAAS,GAFpB,mBAEtB0P,EAFsB,KAEXC,EAFW,OAGe5P,IAAMC,SAAS,IAH9B,mBAGtB4P,EAHsB,KAGNC,EAHM,OAIa9P,IAAMC,UAAS,GAJ5B,mBAItB8a,EAJsB,KAIPC,EAJO,KAMvBzT,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAEvC8G,EAAc,GARS,uBAS7B,YAAmBpY,EAAM0F,QAAzB,+CAAkC,CAAC,IAA1BoQ,EAAyB,QAC9BsC,EAAYnX,KAAK6U,EAAOzM,QAVC,kFAa7B,IAKMX,EAAc,WAChBR,GAAQ,IAgFNS,EAAa,WACf0H,GAAa,GACbE,EAAkB,KAWtB,OACI,yBAAKnO,MAAO,CAACsZ,QAAS,WAClB,kBAACvX,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,cACX1B,MAAM,UACN6B,QAzGY,WACpBmE,IACAT,GAAQ,KAwGA,kBAAC,KAAD,OAEJ,kBAACU,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,eACA,kBAAC6F,EAAA,EAAD,KACI,kBAAChG,EAAA,EAAD,CACIoG,WAAS,EACTC,OAAO,QACPlG,GAAG,aACHmG,MAAM,gBACN5G,QAAQ,WACR8G,WAAS,EACT8K,gBAAiB,CAACC,QAAQ,GAC1BrL,MAAOmH,EACPlH,WAAYoH,EACZ0E,aAAchV,EAAM8V,OAAOzM,QAE/B,kBAACmQ,GAAA,EAAD,CAASpX,MAAO,CAACgH,OAAQ,MACzB,kBAACJ,EAAA,EAAD,wDACoD,6BAAM,6BAD1D,4FAGA,kBAACjG,EAAA,EAAD,CACIqG,OAAO,QACPlG,GAAG,2BACHmG,MAAM,2BACN5G,QAAQ,WACR8G,WAAS,EACT5G,MAAM,YACNM,SA3CE,SAACc,GACfA,EAAMoR,OAAO3T,QAAUxB,EAAM8V,OAAOzM,MACpCoS,GAAiB,GAEjBA,GAAiB,IAwCLpH,gBAAiB,CAACC,QAAQ,MAGlC,kBAAC9K,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CAAQ4B,QAnGG,WACJnD,SAASC,eAAe,4BAA4BE,QACpDxB,EAAM8V,OAAOzM,QAC5BnB,GAAQ,GAER9C,GAAGkT,eAAH,yCAAkB,WAAOC,GAAP,kBAAA/I,EAAA,sEACSpK,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,gBAAgBC,IAAInG,EAAM+P,eAAe7M,IAD5G,cACRuS,EADQ,gBAEWA,EAAS3P,MAFpB,mBAEqD,SAAAkK,GAAM,OAAIA,IAAWhQ,EAAM8V,OAAO5S,IAAjG+M,EAFU,OAE2BsC,OAAOtC,YAAY8G,OAF9C,MAId/W,EAAM8V,OAAOtP,SAASgR,QAAtB,yCAA8B,WAAOmE,GAAP,kBAAAnM,EAAA,6DACpB8H,EAAUlS,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,SAASC,IAAIwV,GAD7D,SAEFrE,EAAQxR,MAFN,OAKA,KAHtBc,EAFsB,OAEa2L,OAAO3L,YAG/B9E,OACXwV,EAAQgE,SAERhE,EAAQI,OAAO,CACX9Q,WAAYA,EAAWmQ,QAAO,SAAA6E,GAAS,OAAIA,IAAc5b,EAAM8V,OAAO5S,QATpD,2CAA9B,uDAJc,UAkBRuS,EAASvP,WAAW,WAAWC,IAAInG,EAAM8V,OAAO5S,IAAIoY,SAlB5C,yBAoBR7F,EAASiC,OAAO,CAClB,YAAezH,IArBL,4CAAlB,uDAuBGrG,MAAK,SAAAC,GACJzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,WAAW/D,IACjE,CACI6F,KAAMA,EAAKyB,MACX+O,QAASxY,EAAM8V,OAAOzM,MACtB0O,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,gCAAkCpC,WA8DTwN,SAAUkB,EAAe7Y,MAAM,aAApE,iBAGA,kBAACC,EAAA,EAAD,CAAQ4B,QAxII,WACxB,IAAM6T,EAAahX,SAASC,eAAe,cAAcE,MAAMC,OAE/DkH,IAEmB,KAAf0P,GACAhI,GAAa,GACbE,EAAkB,4BACX8H,EAAWvW,OAAS,IAC3BuO,GAAa,GACbE,EAAkB,gDACX6H,EAAYlY,SAASmY,IAAeA,IAAerY,EAAM8V,OAAOzM,OACvEgH,GAAa,GACbE,EAAkB,mCAElBrI,GAAQ,GAER9C,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,gBAAgBC,IAAInG,EAAM+P,eAAe7M,IAAIgD,WAAW,WAAWC,IAAInG,EAAM8V,OAAO5S,IAAIwU,OAAO,CACrJrO,MAAOgP,IACRzO,MAAK,SAAAC,GACJzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMqG,SAASnD,IAAIgD,WAAW,WAAW/D,IACjE,CACI6F,KAAMA,EAAKyB,MACX+O,QAASH,EACTN,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,8BAAgCpC,WA4GNnK,MAAM,WAA5C,oBCpGLkZ,OAjEf,SAAgB7b,GACZ,IAAMgI,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAEvCwK,EAAiB9b,EAAM8V,OAAOtP,UAAY,GAC1CA,EAAWxG,EAAMwG,SAASuQ,QAAO,SAAAO,GAAO,OAAIwE,EAAe5b,SAASoX,EAAQpU,OAqClF,MAnCuB,aAAnBlD,EAAMgB,SACNwF,EAASuV,MAAK,SAACvM,EAAGwM,GAAJ,OAAUxM,EAAE+C,OAAO7O,MAAMuY,cAAcD,EAAEzJ,OAAO7O,UACpC,cAAnB1D,EAAMgB,SACbwF,EAASuV,MAAK,SAACvM,EAAGwM,GAAJ,OAAUA,EAAEzJ,OAAO7O,MAAMuY,cAAczM,EAAE+C,OAAO7O,UACpC,SAAnB1D,EAAMgB,SACbwF,EAASuV,MAAK,SAACvM,EAAGwM,GACd,IAAME,EAAQ1M,EAAE+C,OAAO0D,KACjBkG,EAAQH,EAAEzJ,OAAO0D,KACvB,OAAc,OAAViG,GAA4B,OAAVC,EACX3M,EAAE+C,OAAO7O,MAAMuY,cAAcD,EAAEzJ,OAAO7O,OAEnC,OAAVwY,EACO,EAEG,OAAVC,GACQ,EAERD,EAAMhB,SAASkB,YAAcD,EAAMjB,SAASkB,UACrC5M,EAAE+C,OAAO7O,MAAMuY,cAAcD,EAAEzJ,OAAO7O,OAE1CwY,EAAMhB,SAASkB,UAAYD,EAAMjB,SAASkB,aAE3B,UAAnBpc,EAAMgB,SACbwF,EAASuV,MAAK,SAACvM,EAAGwM,GACd,IAAMK,EAAU7M,EAAE+C,OAAOqE,MAAM1W,SAAS8H,EAAKyB,OAE7C,OAAI4S,IADYL,EAAEzJ,OAAOqE,MAAM1W,SAAS8H,EAAKyB,OAElC+F,EAAE+C,OAAO7O,MAAMuY,cAAcD,EAAEzJ,OAAO7O,OAE1C2Y,GAAW,EAAI,KAG1B7V,EAASuV,MAAK,SAACvM,EAAGwM,GAAJ,OAAUF,EAAeQ,QAAQ9M,EAAEtM,IAAM4Y,EAAeQ,QAAQN,EAAE9Y,OAIhF,kBAACqZ,GAAA,EAAD,CAAcna,MAAO,CAACgH,OAAQ,EAAGjG,MAAO,MACpC,kBAACT,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,WAC1B3C,EAAM8V,OAAOzM,OACZrJ,EAAMya,mBACJ,kBAAC,GAAD,CAAkB3E,OAAQ9V,EAAM8V,OAAQpQ,QAAS1F,EAAM0F,QAASW,SAAUrG,EAAMqG,SAAU0J,eAAgB/P,EAAM+P,kBAGxH,yBAAK3N,MAAO,CAACoa,SAAU,OAAQ/C,OAAQ,UAAvC,IACKjT,EAAS8L,KAAI,SAAAgF,GAAO,OACjB,kBAAC,GAAD,CACIjR,SAAUrG,EAAMqG,SAChBoM,IAAK6E,EAAQpU,GACboU,QAASA,EACTwD,KAAMxD,EAAQ/E,OACdyI,eAAgBhb,EAAMgb,eACtBP,kBAAmBza,EAAMya,0BCzBlCgC,OAlCf,SAAqBzc,GACjB,IAAM4G,EAAa5G,EAAM0c,YAAc1c,EAAM0c,YAAYzM,YAAc,GACjEvK,EAAU1F,EAAM0F,QAAQqR,QAAO,SAAAjB,GAAM,OAAIlP,EAAW1G,SAAS4V,EAAO5S,OAC1EwC,EAAQqW,MAAK,SAACvM,EAAGwM,GAAJ,OAAUpV,EAAW0V,QAAQ9M,EAAEtM,IAAM0D,EAAW0V,QAAQN,EAAE9Y,OAGvE,IADA,IAAI8X,EAAiB,GACZnZ,EAAI,EAAGA,EAAI7B,EAAM6V,QAAQ/T,OAAQD,IACtC,IAAK,IAAI8a,EAAI,EAAGA,EAAI3c,EAAM6V,QAAQhU,GAAGC,OAAQ6a,IAAK,CAC9C,IAAIrQ,EAAOtM,EAAM6V,QAAQhU,GAAG8a,GAC5B3B,EAAe1O,EAAKpJ,IAAMoJ,EAAKjD,MAIvC,OACI,yBAAKjH,MAAO,CAACwa,SAAU,2BAA4BnD,OAAQ,OAAWlP,QAAS,qBAAsBmR,QAAS,OAAQmB,SAAU,OAAQC,eAAgB,eAAgBN,SAAU,SAAU/H,MAAO,SAC/L,kBAACsI,GAAA,EAAD,CAAU3a,MAAO,CAACya,SAAU,WACvBnX,EAAQ4M,KAAI,SAAAwD,GAAM,OACf,kBAAC,GAAD,CACIrD,IAAKqD,EAAOzM,MACZyM,OAAQA,EACRpQ,QAASA,EACTW,SAAUrG,EAAMqG,SAChB0J,eAAgB/P,EAAM+P,eACtBvJ,SAAUxG,EAAMwG,SAASuQ,QAAO,SAAC+D,GAAD,OAAUA,EAAKvI,OAAO3L,WAAW1G,SAAS4V,EAAO5S,OACjF8X,eAAgBA,EAChBP,kBAAmBza,EAAMya,kBACzBzZ,SAAUhB,EAAMgB,iBCwHzBgc,G,YAvIX,WAAYhd,GAAQ,IAAD,8BACf,4CAAMA,KAJVid,WAAa,GAKT,EAAKrL,MAAQ,CACTpL,SAAU,GACV0W,WAAY,IAJD,E,iFASfvX,KAAKwX,c,kCAII,IAAD,OACRxX,KAAKyX,SAAWxV,GAAMuV,UAAUxX,KAAK3F,MAAM4F,SAASkM,WAAU,SAACzL,GACtDA,EAASgX,QAGV,EAAKjL,SAAS,CAAC/L,SAAUA,IACzB,EAAKiX,aAAajX,GAClB,EAAKkX,UAAUlX,GACf,EAAKmX,iBAAiBnX,IALtB,EAAKrG,MAAMO,QAAQU,KAAK,gB,mCAWvBoF,GAA0B,IAAD,OAAfoP,EAAe,uDAAN,KAEzB9P,KAAK8X,aACJ9X,KAAK8X,YAAYjL,cAErB,IAAMtM,EAAaG,EAASE,IAAIL,WAAW,iBAG3CuP,EAAWA,GAAYpP,EAASkM,OAAO1C,oBAG3B/N,OACR6D,KAAK8X,YAAc7V,GAAM8V,gBAAgBrX,EAAUoP,GAAU3D,WAAU,SAACnL,GACpE,EAAKyL,SAAS,CAACzL,YAAaA,IAC5B,EAAKgX,YAAYhX,MAIrBhB,KAAK8X,YAAcvX,EAAW0X,MAAM,GAAGxX,YAAW,SAACO,GAC/C,EAAKyL,SAAS,CAACzL,YAAaA,EAAY0L,KAAK,KAC7C,EAAKsL,YAAYhX,EAAY0L,KAAK,S,uCAK7BhM,GAAW,IAAD,OACvBV,KAAKkY,aAAexX,EAASE,IAAIL,WAAW,gBAAgBE,YAAW,SAAC0X,GACpE,EAAK1L,SAAS,CAAC3M,UAAWqY,EAAazL,OACvC,EAAK0L,eAAeD,Q,qCAIbA,GAAe,IAAD,OACzBA,EAAatG,SAAQ,SAAC7Q,GAClB,EAAKsW,WAAWhc,KAAK0F,EAAYJ,IAAIL,WAAW,WAAWE,YAAW,SAACQ,GACnE,IAAIoX,EAAO/G,OAAOgH,OAAO,GAAI,EAAKrM,MAAMsL,YACxCc,EAAKrX,EAAYzD,IAAM0D,EAAWyL,KAClC,EAAKD,SAAS,CAAC8K,WAAYc,IAC3B/O,QAAQC,IAAI,EAAK0C,MAAMsL,qB,oCAKJ,IAAD,OAAlBvW,EAAkB,uDAAN,KAChBhB,KAAKuY,QACLvY,KAAKuY,OAAO1L,cAGhB7M,KAAKuY,OAAStW,GAAM+V,YAAYhX,GAAehB,KAAKiM,MAAMjL,aAAamL,WAAU,SAAClL,GAC9E,EAAKwL,SAAS,CAACxL,WAAYA,EAAWyL,Y,gCAIpChM,GAAW,IAAD,OACZV,KAAKwY,SACLxY,KAAKwY,QAAQ3L,cAGjB7M,KAAKwY,QAAUvW,GAAM2V,UAAUlX,GAAUyL,WAAU,SAACtL,GAChD,EAAK4L,SAAS,CAAC5L,SAAUA,EAAS6L,Y,6CAMtC1M,KAAKyX,UAAYzX,KAAKyX,SAAS5K,cAC/B7M,KAAKuY,QAAUvY,KAAKuY,OAAO1L,cAC3B7M,KAAK8X,aAAe9X,KAAK8X,YAAYjL,cACrC7M,KAAKwY,SAAWxY,KAAKwY,QAAQ3L,cAC7B7M,KAAKkY,cAAgBlY,KAAKkY,eAC1BlY,KAAKsX,WAAWzF,SAAQ,SAAAzR,GAAG,OAAIA,S,+BAI/B,OACI,6BACI,kBAAC,GAAD,CACIM,SAAUV,KAAKiM,MAAMvL,SAAWV,KAAKiM,MAAMvL,SAAW,GACtDmL,MAAO7L,KAAKiM,MAAMvL,SAAWV,KAAKiM,MAAMvL,SAASkM,OAAS,GAC1DxC,eAAgBpK,KAAKiM,MAAMjL,YAAchB,KAAKiM,MAAMjL,YAAc,GAClEjB,QAASC,KAAKiM,MAAMhL,WAAajB,KAAKiM,MAAMhL,WAAW0L,KAAI,SAAC8L,GACxD,IAAI7L,EAAO6L,EAAE7L,OAEb,OADAA,EAAKrP,GAAKkb,EAAElb,GACLqP,KACN,GACLiD,aAAc7P,KAAKiM,MAAMnM,UAAYE,KAAKiM,MAAMnM,UAAY,GAC5DoQ,QAASlQ,KAAKiM,MAAMsL,WAAavX,KAAKiM,MAAMsL,WAAa,GACzDzC,kBAAmB9U,KAAK3F,MAAMya,oBAElC,kBAAC,GAAD,CACIpU,SAAUV,KAAKiM,MAAMvL,SAAWV,KAAKiM,MAAMvL,SAAW,GACtD0J,eAAgBpK,KAAKiM,MAAMjL,YAAchB,KAAKiM,MAAMjL,YAAc,GAClEjB,QAASC,KAAKiM,MAAMhL,WAAajB,KAAKiM,MAAMhL,WAAW0L,KAAI,SAAC8L,GACxD,IAAI7L,EAAO6L,EAAE7L,OAEb,OADAA,EAAKrP,GAAKkb,EAAElb,GACLqP,KACN,GACLmK,YAAa/W,KAAKiM,MAAMjL,YAAchB,KAAKiM,MAAMjL,YAAY4L,OAAS,GACtE/L,SAAUb,KAAKiM,MAAMpL,SACrBqP,QAASlQ,KAAKiM,MAAMsL,WAAavX,KAAKiM,MAAMsL,WAAa,GACzDzC,kBAAmB9U,KAAK3F,MAAMya,kBAC9BzZ,SAAU2E,KAAK3F,MAAMgB,gB,GAzIrBP,IAAMiS,WCCX,YAAC1S,GACZ,IAAMqe,EAAkBnR,cAClB3M,EAAUC,cACVwH,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAElCzK,GAASc,YACjBzB,WAAW,UAAU+L,MAAM,WAAY,iBAAkBjK,EAAKyB,OAAO3D,MAAM8D,MAAK,SAAA0U,GAAa,IAAD,uBAC3F,YAAkBA,EAASjM,KAA3B,+CAAiC,CAC7B,GAD6B,QACrBnP,KAAOlD,EAAMue,MAAMC,OAAO5Y,QAC9B,QAHmF,kFAM3FrF,EAAQU,KAAK,cACd6I,OAAM,SAAAgD,GACLvM,EAAQU,KAAK,cAIjB,IAAID,EAAW,KAQf,OAPIqd,EAAgBle,SAASse,QAAUJ,EAAgBle,SAASse,OAAOpe,WAAW,YAC9EW,EAAWqd,EAAgBle,SAASse,OAAOC,UAAU,GAChD,CAAC,WAAY,YAAa,OAAQ,SAASxe,SAASc,KACrDA,EAAW,OAKf,6BACI,kBAAC,EAAD,CAAQb,SAAUke,EAAgBle,SAASgN,SAAUnM,SAAUA,IAC/D,kBAAC,GAAD,CAAOT,QAASA,EAASqF,QAAS5F,EAAMue,MAAMC,OAAO5Y,QAAS5E,SAAUA,EAAUyZ,kBAAgC,OAAbzZ,M,UCdlG2d,OAlBf,SAAiC3e,GAC7B,OACI,kBAACkM,EAAA,EAAD,CAAMC,WAAS,EAAC/J,MAAO,CAACmI,QAAS,uBAC7B,kBAAC0G,GAAA,EAAD,CAAa5M,aAAW,eACpB,kBAACua,GAAA,EAAD,CAAMjc,MAAM,UAAUE,KAAK,WAA3B,UAGA,kBAAC+b,GAAA,EAAD,CAAMjc,MAAM,UAAUE,KAAM,UAAY7C,EAAMwR,MAAMtO,IAC/ClD,EAAMwR,MAAMnI,OAEjB,kBAAC3G,EAAA,EAAD,CAAYC,MAAM,eACb3C,EAAM6e,oBCwEZC,OA3Ef,SAA2B9e,GAAQ,IAAD,EACNS,IAAMC,UAAS,GADT,mBACvBmE,EADuB,KACjBqD,EADiB,OAEYzH,IAAMC,UAAS,GAF3B,mBAEvB8a,EAFuB,KAERC,EAFQ,KAGxBlb,EAAUC,cAOVkI,EAAc,WAChBR,GAAQ,IAyBZ,OACI,6BACI,kBAACtF,EAAA,EAAD,CAAQ4B,QAjCQ,WACpBiX,GAAiB,GACjBvT,GAAQ,IA+B8BzF,QAAQ,YAAYE,MAAM,aAA5D,gBACA,kBAACiG,EAAA,EAAD,CAAQ/D,KAAMA,EAAME,QAAS2D,EAAaG,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAa5F,GAAG,qBAAhB,gBACA,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,6DACqD,6BAAM,6BAD3D,mCAIA,kBAACjG,EAAA,EAAD,CACIE,SAnBE,SAACc,GACfA,EAAMoR,OAAO3T,QAAUxB,EAAMwR,MAAMnI,MACnCoS,GAAiB,GAEjBA,GAAiB,IAgBLtS,WAAS,EACTC,OAAO,QACPlG,GAAG,qBACHmG,MAAM,aACN5G,QAAQ,WACR8G,WAAS,EACT5G,MAAM,YACN0R,gBAAiB,CAACC,QAAQ,MAGlC,kBAAC9K,EAAA,EAAD,KACI,kBAAC5G,EAAA,EAAD,CAAQ4B,QAASkE,GAAjB,UAGA,kBAAC9F,EAAA,EAAD,CACI4B,QAAS,kBAjDH,SAACua,GAEvB,GADA7W,GAAQ,GACJ6W,IAAc/e,EAAMwR,MAAMnI,MAAO,CACjC,IAAMzD,EAAU5F,EAAMwR,MAAMtO,GACtBmD,EAAWjB,GAAGc,WAAW,UAAUC,IAAIP,GAASc,KAC9BG,GAASmY,YAAYC,cAAc,kBAC3DC,CAAgB,CAACxY,KAAML,IAAWuD,MAAK,SAAAC,GACnCtJ,EAAQU,KAAK,cACd6I,OAAM,SAAAgD,GACLmC,QAAQC,IAAIpC,OAwCWqS,CAAkB9d,SAASC,eAAe,sBAAsBE,QAC/EmB,MAAM,YACN2X,SAAUkB,GAHd,oBCpDpB,SAAS3T,GAAM7H,GACX,OAAO,kBAAC,IAAD,eAAU8H,UAAW,EAAGrF,QAAQ,UAAazC,IAGxD,IAAMkR,GAAY/G,cAAW,SAAAC,GAAK,MAAK,CACnCgV,aAAc,CACV/c,SAAU,EACVkI,QAAS,GACTjH,aAAc,IACdD,YAAa,KAEjB8N,MAAO,CACH5G,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACX9H,MAAOyH,EAAMM,QAAQC,KAAKC,UAC1BgQ,aAAc,IAElBO,OAAQ,CACJrQ,YAAa,EACbhI,WAAY,GAEhBuc,UAAW,CACPlc,MAAO,OAEXmc,KAAM,CACFxU,YAAa,EACbhI,WAAY,OAiPLyc,OA7Of,SAAuBvf,GACnB,IAAMmL,EAAU+F,KADU,EAGQzQ,IAAMC,UAAS,GAHvB,mBAGnB0P,EAHmB,KAGRC,EAHQ,OAIkB5P,IAAMC,SAAS,IAJjC,mBAInB4P,EAJmB,KAIHC,EAJG,OAKsB9P,IAAMC,UAAS,GALrC,mBAKnB8P,EALmB,KAKDC,EALC,OAMgChQ,IAAMC,SAAS,IAN/C,mBAMnBgQ,EANmB,KAMIC,EANJ,OAOoBlQ,IAAMC,UAAS,GAPnC,mBAOnB6N,EAPmB,KAOFC,EAPE,OAQgB/N,IAAMC,UAAS,GAR/B,mBAQnB2N,EARmB,KAQJC,EARI,OASsB7N,IAAMC,UAAS,GATrC,mBASnB8e,EATmB,KASDC,EATC,OAUgChf,IAAMC,SAAS,IAV/C,mBAUnBgf,EAVmB,KAUIC,EAVJ,OAWkBlf,IAAMC,SAAS,IAXjC,mBAWnBkf,EAXmB,KAWHC,EAXG,KAapB7X,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAEvC7I,EAAS,uJA8Gf,SAASE,IACL0H,GAAa,GACbE,EAAkB,IAClBE,GAAoB,GACpBE,EAAyB,IACzBnC,GAAmB,GACnBF,GAAiB,GACjBmR,GAAoB,GACpBE,EAAyB,IAG7B,IAAMjX,EAAc,SAAC3E,EAAOiI,GACT,cAAXA,IAIJsC,GAAiB,GACjBE,GAAmB,KAGvB,OACI,yBAAKvC,UAAWd,EAAQiU,cACpB,kBAAC7S,EAAA,EAAD,CAAON,UAAWd,EAAQgG,OACtB,kBAACjF,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,8CAEJ,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CAAWG,GAAG,YAAYmG,MAAM,OAAOJ,MAAOmH,EAAWlH,WAAYoH,EAAgB7N,QAAQ,WAAWwJ,UAAWd,EAAQkU,UAAWhL,gBAAiB,CAACC,QAAQ,GAAO7B,IAAKzS,EAAMwR,MAAMnI,MAAO2L,aAAchV,EAAMwR,MAAMnI,SAE7N,kBAAC6C,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CAAWG,GAAG,mBAAmBmG,MAAM,yBAAyBJ,MAAOuH,EAAkBtH,WAAYwH,EAAuBjO,QAAQ,WAAWwJ,UAAWd,EAAQkU,UAAWtO,WAAS,EAACD,KAAM,EAAGuD,gBAAiB,CAACC,QAAQ,GAAO7B,IAAKzS,EAAMwR,MAAMjC,YAAayF,aAAchV,EAAMwR,MAAMjC,eAE7R,kBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACzJ,EAAA,EAAD,CAAQH,QAAQ,YAAYE,MAAM,UAAU6B,QA9InC,WAEzB,GADAmE,IACK3I,EAAMwR,MAAX,CAGA,IAAMlC,EAAOjO,SAASC,eAAe,aAAaE,MAAMC,OAClD8N,EAAclO,SAASC,eAAe,oBAAoBE,MAAMC,OAEzD,KAAT6N,GACAe,GAAa,GACbE,EAAkB,gCACXjB,EAAKxN,OAAS,IACrBuO,GAAa,GACbE,EAAkB,qDACXhB,EAAYzN,OAAS,KAC5B2O,GAAoB,GACpBE,EAAyB,6DACF,KAAhBpB,GACPkB,GAAoB,GACpBE,EAAyB,wCAEzBvL,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIwU,OACxC,CACIrO,MAAOiG,EACPC,YAAaA,IAEnB3F,MAAK,SAAAC,GACHzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIgD,WAAW,WAAW/D,IAC9D,CACI6F,KAAMA,EAAKyB,MACXsO,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,+BAAiCpC,SAElDhD,OAAM,SAAAgD,GACLwB,GAAiB,GACjBW,QAAQC,IAAIpC,MAGhB+S,EAAkB,qCAClBrR,GAAmB,OAoGP,mBAIZ,kBAACjC,EAAA,EAAD,CAAON,UAAWd,EAAQgG,OACtB,kBAACjF,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,8CAEJ,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACtJ,EAAA,EAAD,CAAWG,GAAG,cAAc+F,MAAOuW,EAAkBtW,WAAYwW,EAAuBrW,MAAM,8BAA8BC,KAAK,QAAQ7G,QAAQ,WAAWwJ,UAAWd,EAAQkU,UAAWjd,MAAO,CAACe,MAAO,SACzM,kBAACP,EAAA,EAAD,CAAQH,QAAQ,YAAYE,MAAM,UAAUP,MAAO,CAACqX,OAAQ,OAAWtW,MAAO,OAAWqB,QAAS,kBA3GlGiF,EA2GmHpI,SAASC,eAAe,eAAeE,MAAMC,OA1GhLkH,SACc,KAAVc,GACAgW,GAAoB,GACpBE,EAAyB,sBACjBlX,EAAOiB,KAAKD,GAIpBjC,GAAKqF,2BAA2BpD,GAAOG,MAAK,SAAAC,GACpCA,EAAO/H,QAAU,EACjBsD,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIwU,OAAO,CAC/C5H,SAAUjJ,GAASc,UAAUgQ,WAAWC,WAAWnO,KACpDG,MAAK,SAAAC,GACJxI,SAASC,eAAe,eAAeE,MAAQ,GAC/CgN,GAAmB,GACnBqR,EAAkB,wBAA0BpW,EAAQ,QACrDK,OAAM,SAAAgD,GACLmC,QAAQC,IAAIpC,MAES,IAAlBjD,EAAO/H,SACd2d,GAAoB,GACpBE,EAAyB,4BAE9B/V,MAAK,SAAAC,GACJzE,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIgD,WAAW,WAAW/D,IAC9D,CACI6F,KAAMA,EAAKyB,MACXqW,MAAOrW,EACPsO,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,gCAAkCpC,SAEnDhD,OAAM,SAAAgD,GACLmC,QAAQC,IAAIpC,OA9BhB2S,GAAoB,GACpBE,EAAyB,sCAPd,IAAClW,IA2GA,aAEJ,kBAACyC,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAACyN,GAAA,EAAD,CAAgB1X,MAAO,CAACe,MAAO,MAAO2H,YAAa,OAAQhI,WAAY,SACnE,kBAACiX,GAAA,EAAD,CAAOlW,KAAK,SACR,kBAACmW,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,aACA,kBAACA,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,CAAWC,MAAM,SAAjB,cAGR,kBAACC,GAAA,EAAD,KACI,kBAACH,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,cACA,kBAACA,GAAA,EAAD,KACKla,EAAMwR,OAAS,oCACZ,kBAACkI,GAAA,EAAD,CAAMrQ,MAAOrJ,EAAMwR,MAAM5B,MAAOjN,MAAM,UAAUsJ,UAAWd,EAAQmU,SAG3E,kBAACpF,GAAA,EAAD,CAAWC,MAAM,SACb,kBAACE,GAAA,EAAD,CAAQjF,SAAS,EAAMkF,UAAU,EAAM3X,MAAM,cAGpD3C,EAAMwR,OAASxR,EAAMwR,MAAM1B,UAAY,oCACnC9P,EAAMwR,MAAM1B,SAASiH,QAAO,SAAAwD,GAAS,OAAIA,IAAcva,EAAMwR,MAAM5B,SAAO0C,KAAI,SAAAiI,GAAS,OAAI,oCACxF,kBAACN,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,KACI,kBAACR,GAAA,EAAD,CAAMrQ,MAAOkR,EAAW5X,MAAM,UAAU8P,IAAK8H,EAAWtO,UAAWd,EAAQmU,KAAM7c,QAAQ,WAAWkX,SAAU,kBA/F1IlQ,EA+F2J8Q,OA9F3KnV,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIwU,OAAO,CAC/C5H,SAAUjJ,GAASc,UAAUgQ,WAAWoI,YAAYtW,KACrDG,MAAK,SAAAC,GACJ2E,GAAmB,GACnBqR,EAAkB,wBAA0BpW,EAAQ,KACpDrE,GAAGc,WAAW,UAAUC,IAAInG,EAAMwR,MAAMtO,IAAIgD,WAAW,WAAW/D,IAC9D,CACI6F,KAAMA,EAAKyB,MACXqW,MAAOrW,EACPsO,OAAQ,EACRC,UAAWnR,GAASoR,SAASC,cAEnCpO,OAAM,SAAAgD,GACJmC,QAAQC,IAAI,gCAAkCpC,SAEnDhD,OAAM,SAAAgD,GACLmC,QAAQC,IAAIpC,MAjBD,IAACrD,MAiGwB,kBAACyQ,GAAA,EAAD,CAAWC,MAAM,SACb,kBAACE,GAAA,EAAD,CAAQjF,SAAS,EAAMzS,MAAM,yBAWrE,kBAAC4J,EAAA,EAAD,CAAON,UAAWd,EAAQgG,OACtB,kBAACjF,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,gDAEJ,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,kBAAC,GAAD,CAAmBmF,MAAOxR,EAAMwR,WAI5C,kBAACzH,EAAA,EAAD,CAAUlF,KAAM0J,EAAiBxJ,QAAS2D,GACtC,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,WACzD2V,IAGT,kBAAC7V,EAAA,EAAD,CAAUlF,KAAMwJ,EAAetJ,QAAS2D,GACpC,kBAAC,GAAD,CAAO3D,QAAS2D,EAAasB,iBAAkB,IAAMC,SAAS,WAA9D,+CC1ODsV,G,YAtCX,WAAYvf,GAAQ,IAAD,8BACf,4CAAMA,KACD4R,MAAQ,GACb,EAAKuL,YAHU,E,yEAMN,IAAD,OACJxX,KAAKyX,UACLzX,KAAKyX,WAGTzX,KAAKyX,SAAWhY,GAAGc,WAAW,UAAUC,IAAIR,KAAK3F,MAAM4F,SAASQ,YAAW,SAACC,GACxE,IAAIkM,EAAOlM,EAASkM,YAGPyN,IAATzN,IAIJA,EAAKrP,GAAKmD,EAASnD,GACnB,EAAKkP,SAAS,CAACZ,MAAOe,U,6CAK1B5M,KAAKyX,UAAYzX,KAAKyX,a,+BAItB,OACI,6BACI,kBAAC,GAAD,CAAyByB,gBAAgB,WAAWrN,MAAO7L,KAAKiM,MAAMJ,MAAQ7L,KAAKiM,MAAMJ,MAAQ,KACjG,kBAAC,GAAD,CAAwBA,MAAO7L,KAAKiM,MAAMJ,MAAQ7L,KAAKiM,MAAMJ,MAAQ,U,GApCzD/Q,IAAMiS,WC2BnBuN,G,YAzBX,WAAYjgB,GAAQ,IAAD,uBACf,4CAAMA,KAEDqe,gBAAkBnR,cACvB,IAAMlF,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAJ9B,OAMflM,GAAGc,WAAW,UAAUC,IAAInG,EAAMue,MAAMC,OAAO5Y,SAASE,MAAM8D,MAAK,SAAAvD,GAC1DA,EAASgX,QAAUhX,EAASkM,OAAO3C,QAAU5H,EAAKyB,OACnD,EAAKzJ,MAAMO,QAAQU,KAAK,cAE7B6I,OAAM,SAAAgD,GACL,EAAK9M,MAAMO,QAAQU,KAAK,cAXb,E,sEAgBf,OACI,6BACI,kBAAC,EAAD,CAAQd,SAAUwF,KAAK0Y,gBAAgBle,SAASgN,WAChD,kBAAC,GAAD,CAAevH,QAASD,KAAK3F,MAAMue,MAAMC,OAAO5Y,e,GApBhCnF,IAAMiS,W,2TCehCwN,GAAa,CACfC,IAAKC,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAYvG,EAAZ,CAAmBuG,IAAKA,QACxD8Z,MAAOD,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAWvG,EAAX,CAAkBuG,IAAKA,QACzD+Z,MAAOF,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAWvG,EAAX,CAAkBuG,IAAKA,QACzDga,OAAQH,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAmBvG,EAAnB,CAA0BuG,IAAKA,QAClEia,YAAaJ,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAkBvG,EAAlB,CAAyBuG,IAAKA,QACtEka,KAAML,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAUvG,EAAV,CAAiBuG,IAAKA,QACvDma,OAAQN,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAavG,EAAb,CAAoBuG,IAAKA,QAC5Doa,OAAQP,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAgBvG,EAAhB,CAAuBuG,IAAKA,QAC/Dqa,UAAWR,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAevG,EAAf,CAAsBuG,IAAKA,QACjEsa,SAAUT,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAcvG,EAAd,CAAqBuG,IAAKA,QAC/Dua,SAAUV,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAkBvG,EAAlB,CAAyBuG,IAAKA,QACnEwa,aAAcX,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAiBvG,EAAjB,CAAwBuG,IAAKA,QACtEya,YAAaZ,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAWvG,EAAX,CAAkBuG,IAAKA,QAC/D0a,OAAQb,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAYvG,EAAZ,CAAmBuG,IAAKA,QAC3D2a,UAAWd,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAmBvG,EAAnB,CAA0BuG,IAAKA,QACrE4a,gBAAiBf,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAYvG,EAAZ,CAAmBuG,IAAKA,QACpE6a,WAAYhB,sBAAW,SAACpgB,EAAOuG,GAAR,OAAgB,kBAAC,KAAD,iBAAgBvG,EAAhB,CAAuBuG,IAAKA,SAGjE2K,GAAY/G,cAAW,SAAAC,GAAK,MAAK,CACnCgV,aAAc,CACV/c,SAAU,EACVkI,QAAS,GACTjH,aAAc,IACdD,YAAa,KAEjB8N,MAAO,CACH5G,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACX9H,MAAOyH,EAAMM,QAAQC,KAAKC,UAC1BgQ,aAAc,IAElBO,OAAQ,CACJrQ,YAAa,EACbhI,WAAY,GAEhBuc,UAAW,CACPlc,MAAO,OAEXmc,KAAM,CACFxU,YAAa,EACbhI,WAAY,OAoCLyc,OAhCf,SAAuBvf,GACnB,IAAMmL,EAAU+F,KAiBhB,OACI,yBAAKjF,UAAWd,EAAQiU,cACpB,kBAAC7S,EAAA,EAAD,CAAON,UAAWd,EAAQgG,OACtB,kBAACjF,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACrB,kBAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACD,GAAI,IACX,6CACA,kBAAC,KAAD,CAAegV,MAAOnB,GAAYxa,QArBtC,CACZ,CACIhC,MAAO,OACP4d,MAAO,eAEX,CACI5d,MAAO,OACP4d,MAAO,eAEX,CACI5d,MAAO,SACP4d,MAAO,gBAUyD5d,MAAM,UClDnE6d,G,YAhCX,WAAYvhB,GAAQ,IAAD,8BACf,4CAAMA,KACD4R,MAAQ,GACb,EAAKuL,YAHU,E,yEAMN,IAAD,OACJxX,KAAKyX,UACLzX,KAAKyX,WAGTzX,KAAKyX,SAAWhY,GAAGc,WAAW,UAAUC,IAAIR,KAAK3F,MAAM4F,SAASQ,YAAW,SAACC,GACxE,IAAIkM,EAAOlM,EAASkM,OACpBA,EAAKrP,GAAKmD,EAASnD,GACnB,EAAKkP,SAAS,CAACZ,MAAOe,S,6CAK1B5M,KAAKyX,UAAYzX,KAAKyX,a,+BAItB,OACI,6BACI,kBAAC,GAAD,CAAyByB,gBAAgB,UAAUrN,MAAO7L,KAAKiM,MAAMJ,MAAQ7L,KAAKiM,MAAMJ,MAAQ,KAChG,kBAACgQ,GAAD,CAAuBhQ,MAAO7L,KAAKiM,MAAMJ,a,GA9B9B/Q,IAAMiS,WCElB,YAAC1S,GACZ,IAAMqe,EAAkBnR,cAClB3M,EAAUC,cACVwH,EAAO2E,KAAK0E,MAAMpM,aAAaqM,QAAQ,SAe7C,OAbWzK,GAASc,YACjBzB,WAAW,UAAU+L,MAAM,WAAY,iBAAkBjK,EAAKyB,OAAO3D,MAAM8D,MAAK,SAAA0U,GAAa,IAAD,uBAC3F,YAAkBA,EAASjM,KAA3B,+CAAiC,CAC7B,GAD6B,QACrBnP,KAAOlD,EAAMue,MAAMC,OAAO5Y,QAC9B,QAHmF,kFAM3FrF,EAAQU,KAAK,cACd6I,OAAM,SAAAgD,GACLvM,EAAQU,KAAK,cAKb,6BACI,kBAAC,EAAD,CAAQd,SAAUke,EAAgBle,SAASgN,WAC3C,kBAAC,GAAD,CAAcvH,QAAS5F,EAAMue,MAAMC,OAAO5Y,YCXhD6b,G,iLACQ,IAAD,EACsC9b,KAAK3F,MAA7B0S,EADd,EACGhB,UAAyB1R,EAD5B,6BAEL,OACI,kBAAC,IAAD,iBACQA,EADR,CAEI0hB,OAAQ,SAAA1hB,GAAK,OACwB,OAAjCiF,aAAaqM,QAAQ,QACrB,kBAACoB,EAAc1S,GACf,kBAAC,IAAD,CAAUiN,GAAG,mB,GATJxM,IAAMiS,WAiB7BiP,G,iLACQ,IAAD,EACsChc,KAAK3F,MAA7B0S,EADd,EACGhB,UAAyB1R,EAD5B,6BAEL,OACI,kBAAC,IAAD,iBACQA,EADR,CAEI0hB,OAAQ,SAAA1hB,GAAK,OACwB,OAAjCiF,aAAaqM,QAAQ,QACrB,kBAACoB,EAAc1S,GACf,kBAAC,IAAD,CAAUiN,GAAG,oB,GATLxM,IAAMiS,WAmCnBkP,OAlBf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAelb,KAAK,SAASgL,UAAWxG,KACxC,kBAAC,GAAD,CAAexE,KAAK,YAAYgL,UAAWtE,KAC3C,kBAAC,GAAD,CAAgB1G,KAAK,UAAUgL,UAAWiB,KAC1C,kBAAC,GAAD,CAAgBjM,KAAK,2BAA2BgL,UAAW6N,KAC3D,kBAAC,GAAD,CAAgB7Y,KAAK,0BAA0BgL,UAAW6P,KAC1D,kBAAC,GAAD,CAAgB7a,KAAK,kBAAkBgL,UAAWsL,KAClD,kBAAC,IAAD,CAAOtW,KAAK,KACR,kBAAC,IAAD,CAAUuG,GAAG,eCpDbnI,QACW,cAA7B+c,OAAO1hB,SAAS2hB,UAEe,UAA7BD,OAAO1hB,SAAS2hB,UAEhBD,OAAO1hB,SAAS2hB,SAASvD,MACvB,2DCZNwD,IAASL,OAAO,kBAAC,GAAD,MAASrgB,SAASC,eAAe,SD6H3C,kBAAmB0gB,WACrBA,UAAUC,cAAcC,MAAMtY,MAAK,SAAAuY,GACjCA,EAAaC,kB","file":"static/js/main.5078b4a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { fade } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\n\r\nfunction NavBar(props) {\r\n    const showNavigation = !(['/login', '/register'].includes(props.location));\r\n    const showBoardFeatures = props.location.startsWith('/board') && props.location !== '/boards' && !props.location.endsWith('settings') && !props.location.endsWith('history');\r\n    const history = useHistory();\r\n\r\n    const [caseSensitiveChecked, setCaseSensitiveChecked] = React.useState(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = React.useState(null);\r\n\r\n    const handleMenuOpen = event => {\r\n        setMenuAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setMenuAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuClick = (sortMode) => {\r\n        setMenuAnchorEl(null);\r\n        history.push(props.location + '?sort=' + sortMode);;\r\n    };\r\n\r\n    const handleUnlock = () => {\r\n        setMenuAnchorEl(null);\r\n        history.push(props.location);\r\n    };\r\n\r\n    const toggleCaseSensitiveChecked = (event, newValue) => {\r\n        setCaseSensitiveChecked(newValue);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        searchTasks();\r\n    }, [caseSensitiveChecked]);\r\n\r\n    const logOut = () => {\r\n        localStorage.removeItem('user');\r\n        history.push('/login');\r\n    }\r\n\r\n    const searchTasks = () => {\r\n        let searchInputElement = document.getElementById('taskSearchInput');\r\n        if (!searchInputElement) {\r\n            return;\r\n        }\r\n        let searchInput = searchInputElement.value.trim();\r\n        if (!caseSensitiveChecked) {\r\n            searchInput = searchInput.toLowerCase();\r\n        }\r\n        const taskElements = document.getElementsByClassName('taskListing');\r\n\r\n        if (searchInput === '') {\r\n            for (let i = 0; i < taskElements.length; i++) {\r\n                taskElements[i].classList.remove('search_matches');\r\n                taskElements[i].classList.remove('search_no_matches');\r\n            }\r\n        } else {\r\n            for (let i = 0; i < taskElements.length; i++) {\r\n                let content = taskElements[i].innerText;\r\n                if (!caseSensitiveChecked) {\r\n                    content = content.toLowerCase();\r\n                }\r\n                if (content.includes(searchInput)) {\r\n                    taskElements[i].classList.remove('search_no_matches');\r\n                    taskElements[i].classList.add('search_matches');\r\n                } else {\r\n                    taskElements[i].classList.remove('search_matches');\r\n                    taskElements[i].classList.add('search_no_matches');\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{flexGrow: 1}}>\r\n            <AppBar position='sticky'>\r\n                <Toolbar variant='dense'>\r\n                    <Typography variant='h6' color='inherit' style={{flexGrow: 1}}>\r\n                        Managemit\r\n                        {showNavigation &&\r\n                            <Button href='/boards' color='inherit' style={{marginLeft: 5}}>Boards</Button>\r\n                        }\r\n                    </Typography>\r\n                    {showBoardFeatures && <>\r\n                        <TextField placeholder='Search for task' onChange={() => searchTasks()} id='taskSearchInput' style={{width: '25%', borderRadius: 5 + 'px', paddingLeft: 5, paddingRight: 5, color: '#FFFFFF', backgroundColor: fade('#FFFFFF', 0.15), '&:hover': {backgroundColor: fade('#FFFFFF', 0.25)}}}/>\r\n                        <Tooltip title='Case sensitivity' arrow>\r\n                            <ToggleButtonGroup size='small' exclusive value={caseSensitiveChecked} style={{backgroundColor: 'inherit'}} onChange={toggleCaseSensitiveChecked}>\r\n                                <ToggleButton value={true} style={{border: 0, color: 'white'}}>\r\n                                    <TextFormatIcon />\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Tooltip>\r\n                        <Tooltip title='Sort tasks' arrow>\r\n                            <IconButton\r\n                                edge='end'\r\n                                aria-label='sort'\r\n                                color='inherit'\r\n                                aria-controls='sort-menu'\r\n                                aria-haspopup='true'\r\n                                onClick={handleMenuOpen}\r\n                            >\r\n                                <SortIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Menu\r\n                            id='sort-menu'\r\n                            anchorEl={menuAnchorEl}\r\n                            keepMounted\r\n                            open={Boolean(menuAnchorEl)}\r\n                            onClose={handleMenuClose}\r\n                        >\r\n                            <MenuItem onClick={() => handleMenuClick('titleAsc')}>Sort by title (ascending)</MenuItem>\r\n                            <MenuItem onClick={() => handleMenuClick('titleDesc')}>Sort by title (descending)</MenuItem>\r\n                            <MenuItem onClick={() => handleMenuClick('date')}>Sort by due date</MenuItem>\r\n                            <MenuItem onClick={() => handleMenuClick('users')}>Sort by assigned to me</MenuItem>\r\n                        </Menu>\r\n                        {props.sortMode !== null && (\r\n                            <Tooltip title='Return to default task display and unlock functionality' arrow>\r\n                                <IconButton\r\n                                    edge='end'\r\n                                    aria-label='unlock'\r\n                                    color='inherit'\r\n                                    onClick={handleUnlock}\r\n                                >\r\n                                    <LockOpenIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n                    </>}\r\n                    {showNavigation && <>\r\n                        <Tooltip title='Notifications' arrow>\r\n                            <IconButton\r\n                                edge='end'\r\n                                aria-label='notifications'\r\n                                color='inherit'\r\n                                style={{marginLeft: 30}}>\r\n                                <MailIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='User account' arrow>\r\n                            <IconButton\r\n                                edge='end'\r\n                                aria-label='user account'\r\n                                color='inherit'>\r\n                                <AccountCircle />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Log out' arrow>\r\n                            <IconButton\r\n                                edge='end'\r\n                                aria-label='log out'\r\n                                color='inherit'\r\n                                onClick={logOut}>\r\n                                <ExitToAppIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </>}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import firebase from 'firebase'\r\nimport {ReplaySubject} from 'rxjs';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCEN33oNb29C4H6rUj9H5do_zimBQS7ycI\",\r\n    authDomain: \"managemit.firebaseapp.com\",\r\n    databaseURL: \"https://managemit.firebaseio.com\",\r\n    projectId: \"managemit\",\r\n    storageBucket: \"managemit.appspot.com\",\r\n    messagingSenderId: \"615143879220\",\r\n    appId: \"1:615143879220:web:7e5d434378e0ef98401061\",\r\n    measurementId: \"G-Z49YLSWB09\"\r\n  };\r\n\r\nclass FirebaseCache {\r\n  \r\n  subscriptions = [];\r\n  boards = new Map();\r\n  tasks = new Map();\r\n  colGroups = new Map();\r\n  columns = new Map();\r\n  \r\n  constructor(db) {\r\n    this.db = db;\r\n  }\r\n\r\n  // Given the id of the board, returns an observable for the board\r\n  loadBoard(boardId) {\r\n    if(this.boards.has(boardId)) {\r\n      return this.boards.get(boardId);\r\n    } else {\r\n      let sub = new ReplaySubject(1);\r\n      this.boards.set(boardId, sub);\r\n      this.subscriptions.push(this.db.collection(\"boards\").doc(boardId).onSnapshot((boardRef) => {\r\n        sub.next(boardRef);\r\n      }));\r\n      return sub;\r\n    }\r\n  }\r\n\r\n  loadTasks(boardRef) {\r\n    if(this.tasks.has(boardRef.id)) {\r\n      return this.tasks.get(boardRef.id);\r\n    } else {\r\n      let sub = new ReplaySubject(1);\r\n      this.tasks.set(boardRef.id, sub);\r\n      this.subscriptions.push(boardRef.ref.collection(\"tasks\").onSnapshot((taskRefs) => {\r\n        sub.next(taskRefs);\r\n      }));\r\n      return sub;\r\n    }\r\n  }\r\n\r\n  // Given a boardRef and a columnGroupId, returns an observable for the Column Group\r\n  loadColumnGroup(boardRef, columnGroupId) {\r\n    let path = `${boardRef.id}-${columnGroupId}`;\r\n    if(this.colGroups.has(path)) {\r\n      return this.colGroups.get(path);\r\n    } else {\r\n      let sub = new ReplaySubject(1);\r\n      this.colGroups.set(path, sub);\r\n      this.subscriptions.push(boardRef.ref.collection(\"columnGroups\").doc(columnGroupId).onSnapshot((colGroupRef) => {\r\n        sub.next(colGroupRef);\r\n      }));\r\n      return sub;\r\n    }\r\n  }\r\n\r\n  // Given a reference to a column group, returns an observable for columns in the column group\r\n  loadColumns(colGroupRef) {\r\n    if(this.columns.has(colGroupRef.id)) {\r\n      return this.columns.get(colGroupRef.id);\r\n    } else {\r\n      let sub = new ReplaySubject(1);\r\n      this.columns.set(colGroupRef.id, sub);\r\n      this.subscriptions.push(colGroupRef.ref.collection(\"columns\").onSnapshot((columnRefs) => {\r\n        sub.next(columnRefs);\r\n      }));\r\n      return sub;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\nexport const currentUser = new ReplaySubject(1);\r\nexport const db = firebase.firestore();\r\nexport const cache = new FirebaseCache(db);\r\nexport default firebase;\r\n\r\nauth.onAuthStateChanged((user) => {\r\n  currentUser.next(user);\r\n});","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport { auth } from '../../Firebase.js'\r\nimport { Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n}\r\n\r\nfunction ResetPasswordDialog() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [resetPasswordEmailError, setResetPasswordEmailError] = React.useState(false);\r\n    const [resetPasswordEmailHelperText, setResetPasswordEmailHelperText] = React.useState('');\r\n    const [resetPasswordSuccessSnackbar, setResetPasswordSuccessSnackbar] = React.useState(false);\r\n    const regexp = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    \r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setResetPasswordSuccessSnackbar(false);\r\n    };\r\n\r\n    function sendPasswordResetEmail(email) {\r\n        clearState();\r\n        if (email === '') {\r\n            setResetPasswordEmailError(true);\r\n            setResetPasswordEmailHelperText('Email is required');\r\n        } else if (!regexp.test(email)) {\r\n            setResetPasswordEmailError(true);\r\n            setResetPasswordEmailHelperText('Email must be properly formatted');\r\n        } else {\r\n            auth.sendPasswordResetEmail(email).then(result => {\r\n                handleClose();\r\n            }).catch(error => {\r\n\r\n            });\r\n            setResetPasswordSuccessSnackbar(true);\r\n        }\r\n    }\r\n\r\n    const clearState = () => {\r\n        setResetPasswordEmailError(false);\r\n        setResetPasswordEmailHelperText('');\r\n        setResetPasswordSuccessSnackbar(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={handleClickOpen}>Forgot password?</Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Reset password</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                    Enter your email. If the email is already associated with an account, you will recieve an email with a new password.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        error={resetPasswordEmailError}\r\n                        helperText={resetPasswordEmailHelperText}\r\n                        autoFocus\r\n                        margin='dense'\r\n                        id='forgotPasswordEmail'\r\n                        label='Email'\r\n                        type='email'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => sendPasswordResetEmail(document.getElementById(\"forgotPasswordEmail\").value)} color='primary'>\r\n                        Reset password\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Snackbar open={resetPasswordSuccessSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='success'>\r\n                    If an account with this email exists, an email to reset the password has been sent\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPasswordDialog;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst getStyles = () => {\r\n    return makeStyles(theme => ({\r\n        loginBody: {\r\n            margin: 20,\r\n        },\r\n        loginPaper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary\r\n        },\r\n        loginButton: {\r\n            marginRight: 5,\r\n            marginLeft: 5\r\n        },\r\n        loginTextField: {\r\n            width: 80 + '%'\r\n        },\r\n        passwordStrengthBar: {\r\n            marginRight: 15 + '%',\r\n            marginLeft: 15 + '%',\r\n            marginTop: 2 + '%',\r\n        }\r\n    }))();\r\n};\r\n\r\nexport default getStyles;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport ResetPasswordDialog from '../component/ResetPasswordDialog';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport getStyles from '../../styling/getStyles';\r\n\r\nimport { auth, provider } from '../../Firebase.js'\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n}\r\n\r\nfunction Login(props) {\r\n    const classes = getStyles();\r\n    const history = useHistory();\r\n\r\n    const [loginEmailError, setLoginEmailError] = React.useState(false);\r\n    const [loginEmailErrorHelperText, setLoginEmailErrorHelperText] = React.useState('');\r\n    const [loginPasswordError, setLoginPasswordError] = React.useState(false);\r\n    const [loginPasswordErrorHelperText, setLoginPasswordErrorHelperText] = React.useState('');\r\n    const [loginErrorSnackbar, setloginErrorSnackbar] = React.useState(false);\r\n    const [errorText, setErrorText] = React.useState('');\r\n    const regexp = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    const signInWithEmailAndPassword = (email, password) => {\r\n        clearState();\r\n        if (email === '') {\r\n            setLoginEmailError(true);\r\n            setLoginEmailErrorHelperText('Email is required');\r\n        } else if (!regexp.test(email)) {\r\n            setLoginEmailError(true);\r\n            setLoginEmailErrorHelperText('Email must be properly formatted');\r\n        } else if (password === '') {\r\n            setLoginPasswordError(true);\r\n            setLoginPasswordErrorHelperText('Password is required');\r\n        } else if (password.length < 6) {\r\n            setLoginPasswordError(true);\r\n            setLoginPasswordErrorHelperText('Password must be greater than 6 characters long')    \r\n        } else if (password.length > 128) {\r\n            setLoginPasswordError(true);\r\n            setLoginPasswordErrorHelperText('Password must be less than 128 characters long');\r\n        } else {\r\n            auth.signInWithEmailAndPassword(email, password).then(result => {\r\n                localStorage.setItem('user', JSON.stringify(result.user));\r\n                history.push('/boards');\r\n            }).catch(error => {\r\n                auth.fetchSignInMethodsForEmail(email).then(result => {\r\n                    if (result[0] === 'google.com') {\r\n                        setloginErrorSnackbar(true);\r\n                        setErrorText(\"This email is associated with a Google account. Please login via Google\");\r\n                    } else {\r\n                        setloginErrorSnackbar(true);\r\n                        setErrorText(\"The email and/or password is incorrect. Please try again\");\r\n                    }\r\n                }).catch(err => {\r\n                    setloginErrorSnackbar(true);\r\n                    setErrorText(err.message);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    const loginWithGoogle = () => {\r\n        auth.signInWithPopup(provider).then(result => {\r\n            localStorage.setItem('user', JSON.stringify(result.user));\r\n            history.push('/boards');\r\n        }).catch(error => {\r\n            setloginErrorSnackbar(true);\r\n            setErrorText(error.message);        });\r\n    };\r\n\r\n    const clearState = () => {\r\n        setLoginEmailError(false);\r\n        setLoginEmailErrorHelperText('');\r\n        setLoginPasswordError(false);\r\n        setLoginPasswordErrorHelperText('');\r\n        setloginErrorSnackbar(false);\r\n        setErrorText('');\r\n    }\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setloginErrorSnackbar(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.loginBody}>\r\n            <Grid container justify=\"center\" xs={12}>\r\n                <Grid container spacing={3} xs={4}>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.loginPaper}>\r\n                            <h2>Welcome to Managemit</h2>\r\n                            <p>Keep track of your tasks and work collaboratively. Log in or register to get started.</p>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.loginPaper}>\r\n                            <h2>Log in</h2>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField id='email' error={loginEmailError} helperText={loginEmailErrorHelperText} label='Email' type='email' variant='outlined' className={classes.loginTextField} />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField id='password' error={loginPasswordError} helperText={loginPasswordErrorHelperText} label='Password' variant='outlined' type='password' className={classes.loginTextField} />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Button variant='contained' color='primary' className={classes.loginButton} onClick={() => signInWithEmailAndPassword(document.getElementById(\"email\").value, document.getElementById(\"password\").value)}>Log in</Button>\r\n                                    <Button variant='contained' className={classes.loginButton} onClick={loginWithGoogle}>Log in with Google</Button>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Link to='/register'><Button variant='contained' color='primary' className={classes.loginButton}>Register a new account</Button></Link>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <ResetPasswordDialog />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar open={loginErrorSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='error'>\r\n                    {errorText}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport Login from './pageBody/Login';\r\n\r\nexport default (props) => {\r\n    const history = createBrowserHistory();\r\n\r\n    return (\r\n        <div>\r\n            <NavBar location={history.location.pathname}  />\r\n            <Login />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport getStyles from '../../styling/getStyles';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { auth } from '../../Firebase.js';\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n}\r\n\r\nfunction Register(props) {\r\n    const classes = getStyles();\r\n\r\n    const regexp = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const uppercase = new RegExp('(?=.*[A-Z])');\r\n    const numeric = new RegExp('(?=.*[0-9])');\r\n    const special = new RegExp('(?=.[!@#$%^&])');\r\n    const [firstPasswordError, setFirstPasswordError] = React.useState(false);\r\n    const [firstPasswordHelperText, setFirstPasswordHelperText] = React.useState('');\r\n    const [secondPasswordError, setSecondPasswordError] = React.useState(false);\r\n    const [secondPasswordHelperText, setSecondPasswordHelperText] = React.useState('');\r\n    const [emailError, setEmailError] = React.useState(false);\r\n    const [emailHelperText, setEmailHelperText] = React.useState('');\r\n    const [errorSnackbar, setErrorSnackbar] = React.useState(false);\r\n    const [successSnackbar, setSuccessSnackbar] = React.useState(false);\r\n    const [passwordStrength, setPasswordStrength] = React.useState(0);\r\n\r\n    const signUpUser = (email, password, repassword) => {\r\n        clearState();\r\n        if (email === '') {\r\n            setEmailError(true);\r\n            setEmailHelperText('Email is required');\r\n        } else if (!regexp.test(email)) {\r\n            setEmailError(true);\r\n            setEmailHelperText('Email must be properly formatted');\r\n        } else if (password.length < 6) {\r\n            setFirstPasswordError(true);\r\n            setFirstPasswordHelperText('Password must be greater 6 characters long')\r\n        } else if (password.length > 128) {\r\n            setFirstPasswordError(true);\r\n            setFirstPasswordHelperText('Password cannot be greater than 128 characters long')\r\n        } else if (password !== repassword) {\r\n            setFirstPasswordError(true);\r\n            setFirstPasswordHelperText('Passwords must match')\r\n            setSecondPasswordError(true);\r\n            setSecondPasswordHelperText('Passwords must match')\r\n        } else {\r\n            auth.createUserWithEmailAndPassword(email, password).then(result => {\r\n                setSuccessSnackbar(true);\r\n            }).catch(error => {\r\n                console.log(error);\r\n                if (error.code === 'auth/email-already-in-use') {\r\n                    setEmailError(true);\r\n                    setEmailHelperText('Email already in use - have you already registered an account?');\r\n                } else {\r\n                    setErrorSnackbar(true);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const evaluatePasswordStrength = () => {\r\n        const password = document.getElementById('password').value;\r\n        setPasswordStrength(scorePassword(password));\r\n        // TODO: Coloring and text\r\n    }\r\n    const scorePassword = (password) => {\r\n        setPasswordStrength(0);\r\n        let score = 0;\r\n        if (password.length > 6) {\r\n            score += 15;\r\n        }\r\n        if (password.length > 12) {\r\n            score += 20;\r\n        }\r\n        if (uppercase.test(password)) {\r\n            score += 20;\r\n        }\r\n        if (numeric.test(password)) {\r\n            score += 20;\r\n        }\r\n        if (special.test(password)) {\r\n            score += 25;\r\n        }\r\n        return score;\r\n    }\r\n\r\n    const clearState = () => {\r\n        setFirstPasswordError(false);\r\n        setFirstPasswordHelperText('');\r\n        setSecondPasswordError(false);\r\n        setSecondPasswordHelperText('');\r\n        setEmailError(false);\r\n        setEmailHelperText('');\r\n        setSuccessSnackbar(false);\r\n        setErrorSnackbar(false);\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setErrorSnackbar(false);\r\n        setSuccessSnackbar(false);\r\n    };\r\n\r\n    return (    \r\n        <div className={classes.loginBody}>\r\n            <Grid container justify='center' xs={12}>\r\n                <Grid container spacing={3} xs={4}>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.loginPaper}>\r\n                            <h2>Welcome to Managemit</h2>\r\n                            <p>\r\n                                Keep track of your tasks and work collaboratively. Log in or\r\n                                register to get started.\r\n                            </p>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.loginPaper}>\r\n                            <h2>Register</h2>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        error={emailError}\r\n                                        helperText={emailHelperText}\r\n                                        label='Email'\r\n                                        type='email'\r\n                                        variant='outlined'\r\n                                        id='email'\r\n                                        className={classes.loginTextField}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        onChange={evaluatePasswordStrength.bind()}\r\n                                        error={firstPasswordError}\r\n                                        helperText={firstPasswordHelperText}\r\n                                        label='Password'\r\n                                        type='password'\r\n                                        variant='outlined'\r\n                                        id='password'\r\n                                        className={classes.loginTextField}\r\n                                    />\r\n                                    <LinearProgress \r\n                                        className={classes.passwordStrengthBar}\r\n                                        variant=\"determinate\" \r\n                                        value={passwordStrength} \r\n                                        color='primary' \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        error={secondPasswordError}\r\n                                        helperText={secondPasswordHelperText}\r\n                                        label='Re-enter password'\r\n                                        type='password'\r\n                                        variant='outlined'\r\n                                        id='repassword'\r\n                                        className={classes.loginTextField}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Button\r\n                                        variant='contained'\r\n                                        color='primary'\r\n                                        className={classes.loginButton}\r\n                                        onClick={() =>\r\n                                            signUpUser(\r\n                                                document.getElementById('email').value,\r\n                                                document.getElementById('password').value,\r\n                                                document.getElementById('repassword').value\r\n                                            )\r\n                                        }\r\n                                    >\r\n                                        Register\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar open={successSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='success'>\r\n                    Account successfully created!\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={errorSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='success'>\r\n                    There was an error creating an account!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport Register from './pageBody/Register';\r\n\r\nexport default (props) => {\r\n    const history = createBrowserHistory();\r\n\r\n    return (\r\n        <div>\r\n            <NavBar location={history.location.pathname}  />\r\n            <Register />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport {auth, db} from '../../Firebase';\r\n\r\nconst defaultColumns = [\"Backlog\",\"In Progress\",\"Reviewing\",\"Complete\"];\r\n\r\nconst createBoard = async (name, description) => {    \r\n    return new Promise((res,rej) => {\r\n        db.collection(\"boards\").add({\r\n            owner: auth.currentUser.email,\r\n            label: name,\r\n            description: description,\r\n            defaultColumnGroup: \"\",\r\n            taskRefs: [],\r\n            userRefs: [auth.currentUser.email]\r\n        }).then((boardRef) => {\r\n            return boardRef.collection(\"columnGroups\").add({\r\n                label: \"Default Group\"\r\n            });\r\n        }).then(async (columnGroupRef) => {\r\n            let columnRefs = [];\r\n            for (const title of defaultColumns) {\r\n                let colRef = await columnGroupRef.collection(\"columns\").add({\r\n                    label: title,\r\n                    taskRefs: [],        \r\n                });\r\n                columnRefs.push(colRef.id);\r\n            }\r\n            await columnGroupRef.set({\r\n                columnOrder: columnRefs\r\n            }, {merge: true});\r\n        }).then(() => {\r\n            res();\r\n        }).catch((err) => {\r\n            rej(err);\r\n        })\r\n    });\r\n};\r\n\r\n\r\nfunction NewBoardDialog() {\r\n    const [open, setOpen] = React.useState(false);\r\n    \r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [nameHelperText, setNameHelperText] = React.useState('');\r\n    const [descriptionError, setDescriptionError] = React.useState(false);\r\n    const [descriptionHelperText, setDescriptionHelperText] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    \r\n    const handleClose = (name,description) => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const handleSubmit = async () => {\r\n        const name = document.getElementById('newBoardName').value.trim();\r\n        const description = document.getElementById('newBoardDescription').value.trim();\r\n        \r\n        clearState();\r\n        \r\n        if (name === '') {\r\n            setNameError(true);\r\n            setNameHelperText('Board name is required');\r\n        } else if (name.length > 50) {\r\n            setNameError(true);\r\n            setNameHelperText('Board name must be less than 50 characters long')\r\n        } else if (description.length > 150) {\r\n            setDescriptionError(true);\r\n            setDescriptionHelperText('Board description must be greater than 150 characters long')\r\n        } else {\r\n            try {\r\n                setOpen(false);\r\n                createBoard(name,description).catch((err) => {console.error(err)});\r\n            } catch (err) {\r\n                setOpen(true);\r\n                setNameError(true);\r\n                setNameHelperText('Board could not be created!');\r\n            }\r\n        }\r\n    };\r\n    \r\n    const clearState = () => {\r\n        setNameError(false);\r\n        setNameHelperText('');\r\n        setDescriptionError(false);\r\n        setDescriptionHelperText('');\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <ButtonGroup size='small'>\r\n                <Button onClick={handleClickOpen}>New board</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>New board</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Enter a name for your new board.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                    autoFocus\r\n                    margin='dense'\r\n                    id='newBoardName'\r\n                    label='Board name'\r\n                    variant='outlined'\r\n                    fullWidth\r\n                    error={nameError}\r\n                    helperText={nameHelperText}\r\n                    />\r\n                    <TextField\r\n                    margin='dense'\r\n                    id='newBoardDescription'\r\n                    label='Board description (optional)'\r\n                    rows='5'\r\n                    variant='outlined'\r\n                    multiline\r\n                    fullWidth\r\n                    error={descriptionError}\r\n                    helperText={descriptionHelperText}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color='primary'>\r\n                        Create board\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n        );\r\n    }\r\n    \r\n    export default NewBoardDialog;","import React from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\nimport NewBoardDialog from './NewBoardDialog.js';\r\n\r\nfunction BoardsActions(props) {\r\n    return (\r\n        <Grid container style={{padding: '10px 10px 0px 10px'}}>\r\n            <div style={{flexGrow: 1}}>\r\n                <Breadcrumbs aria-label='breadcrumbs'>\r\n                    <Typography color='textPrimary'>\r\n                        Boards\r\n                    </Typography>\r\n                </Breadcrumbs>\r\n            </div>\r\n            <NewBoardDialog />\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default BoardsActions;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        padding: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nfunction BoardCard(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const boardPath = '/board/' + props.board.id;\r\n    const goToBoardPage = () => {\r\n        history.push(boardPath);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={3}>\r\n            <Paper className={classes.paper} style={{cursor: 'pointer'}} onClick={goToBoardPage}>\r\n                <Typography variant='h6' component='h2' style={{textAlign: 'center'}}>\r\n                    {props.board.label}\r\n                </Typography>\r\n                <Typography variant='body2' component='p' size='small' style={{textAlign: 'center'}}>\r\n                    {props.board.owner === user.email ? 'Owner - ' : ''}\r\n                    {props.board.userRefs.length} collaborator{props.board.userRefs.length > 1 ? 's' : ''}\r\n                </Typography>\r\n                <Typography variant='body2' component='p'>\r\n                    <br />\r\n                    {props.board.description === '' ? '(No description provided)' : props.board.description}\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default BoardCard;","import React from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport BoardCard from './BoardCard.js'\r\n\r\nimport { db, currentUser } from '../../Firebase';\r\n\r\nclass BoardCardCollection extends React.Component {\r\n\r\n    boardsSub;\r\n    userSub;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.userSub = currentUser.subscribe((user) => {\r\n            this.loadBoards(user);\r\n        });\r\n    }\r\n\r\n    loadBoards(user) {\r\n        if (this.boardsSub) {\r\n            this.boardsSub();\r\n        }\r\n        \r\n        this.boardsSub = db.collection('boards').where('userRefs', 'array-contains', user.email).orderBy('label', 'asc').onSnapshot((boardsRefs) => {\r\n            this.setState({boardsRefs: boardsRefs.docs.map(boardRef => {\r\n                let data = boardRef.data();\r\n                data.id = boardRef.id;\r\n                return data;\r\n            })});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.boardsSub && this.boardsSub();\r\n        this.userSub && this.userSub.unsubscribe();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width: 80 + '%', margin: '10px auto 0px auto'}}>\r\n                <Grid container spacing={3}>\r\n                    {this.state.boardsRefs && <>\r\n                        {this.state.boardsRefs.map(board => (\r\n                            <BoardCard key={board.id} board={board} />\r\n                        ))}\r\n                    </>}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardCardCollection;","import React from 'react';\r\n\r\nimport BoardsActions from '../component/BoardsActions';\r\nimport BoardCardCollection from '../component/BoardCardCollection';\r\n\r\nfunction Boards(props) {\r\n    return (\r\n        <div>\r\n            <BoardsActions />\r\n            <BoardCardCollection />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Boards;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport Boards from './pageBody/Boards';\r\n\r\nexport default (props) => {\r\n    const history = createBrowserHistory();\r\n\r\n    return (\r\n        <div>\r\n            <NavBar location={history.location.pathname}  />\r\n            <Boards />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport { Link } from 'react-router-dom';\r\n// import Link from '@material-ui/core/Link';\r\n\r\nfunction BoardBreadcrumbs(props) {\r\n    return (\r\n        <Breadcrumbs aria-label='breadcrumbs'>\r\n            <Link to=\"/boards\" color='inherit'>\r\n                Boards\r\n            </Link>\r\n            <Typography color='textPrimary'>\r\n                {props.board ? props.board.label : ''}\r\n            </Typography>\r\n        </Breadcrumbs>\r\n    );\r\n}\r\n\r\nexport default BoardBreadcrumbs;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { db } from '../../Firebase';\r\nimport firebase from '../../Firebase';\r\n\r\nfunction EditTaskDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [titleError, setTitleError] = React.useState(false);\r\n    const [titleHelperText, setTitleHelperText] = React.useState('');\r\n    const [descError, setDescError] = React.useState(false);\r\n    const [descHelperText, setDescHelperText] = React.useState('');\r\n    const [dateError, setDateError] = React.useState(false);\r\n    const [dateHelperText, setDateHelperText] = React.useState('');\r\n    const [columnError, setColumnError] = React.useState(false);\r\n    const [columnHelperText, setColumnHelperText] = React.useState('');\r\n    const [checklistError, setChecklistError] = React.useState(false);\r\n    const [checklistHelperText, setChecklistHelperText] = React.useState('');\r\n    const [checklistItems, setChecklistItems] = React.useState([]);\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const handleClickOpen = () => {\r\n        clearState();\r\n        clearChecklistErrors();\r\n        setChecklistItems([]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        let label = document.getElementById('taskTitle').value.trim();\r\n        let desc = document.getElementById('taskDescription').value.trim();\r\n        let date = document.getElementById('taskDueDate').valueAsDate;\r\n\r\n        // date inputs give UTC dates, so we need to convert that to the local timezone\r\n        if (date != null) {\r\n            date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\r\n        }\r\n\r\n        let columnElements = document.querySelectorAll('[name=\"taskColumnGroup\"]');\r\n        let columns = {};\r\n        let columnIds = [];\r\n        for (let columnElement of columnElements) {\r\n            if (columnElement.value !== '') {\r\n                columns[columnElement.previousSibling.id] = columnElement.value;\r\n                columnIds.push(columnElement.value);\r\n            }\r\n        }\r\n\r\n        let usersElement = document.getElementById('taskUsers');\r\n        let users = usersElement.textContent.split(', '); // temporary solution - this is unpleasant\r\n        users = users.filter(user => user.trim().length > 1);\r\n\r\n        clearState();\r\n        let hasError = false;\r\n\r\n        if (!label.length) {\r\n            hasError = true;\r\n            setTitleError(true);\r\n            setTitleHelperText('Title is required');\r\n        }\r\n        if (label.length > 500) {\r\n            hasError = true;\r\n            setTitleError(true);\r\n            setTitleHelperText('Title must be less than 500 characters');\r\n        }\r\n        if (desc.length > 5000) {\r\n            hasError = true;\r\n            setDescError(true);\r\n            setDescHelperText('Description must be less than 5000 characters');\r\n        }\r\n        if (!Object.keys(columns).length) {\r\n            hasError = true;\r\n            setColumnError(true);\r\n            setColumnHelperText('At least one column is required');\r\n        }\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0); // We want to check for the current day at midnight\r\n        if (date !== null && date < today) {\r\n            hasError = true;\r\n            setDateError(true);\r\n            setDateHelperText('Date cannot be in the past');\r\n        }\r\n\r\n        if (!hasError) {\r\n            setOpen(false);\r\n\r\n\r\n            props.boardRef.ref.collection(\"tasks\").add({\r\n                title: label,\r\n                desc: desc,\r\n                date: date,\r\n                users: users,\r\n                columnRefs: columnIds,\r\n                checklist: checklistItems\r\n            }).then((taskRef) => {\r\n                let columnUpdates = [];\r\n                Object.keys(columns).forEach((colGroupId) => {\r\n                    columnUpdates.push(\r\n                        props.boardRef.ref.collection(\"columnGroups\").doc(colGroupId).collection(\"columns\").doc(columns[colGroupId]).update({\r\n                            taskRefs: firebase.firestore.FieldValue.arrayUnion(taskRef.id)\r\n                        })\r\n                    );\r\n                });\r\n                return Promise.all(columnUpdates);\r\n            }).then(result => {\r\n                return db.collection('boards').doc(props.boardRef.id).collection('history').add({\r\n                        user: user.email,\r\n                        taskName: label,\r\n                        action: 7,\r\n                        timestamp: firebase.database.ServerValue\r\n                    });\r\n            }).catch(err => console.error(\"Error in adding task:\", err));\r\n        }\r\n    }\r\n\r\n    const handleAddChecklistItem = () => {\r\n        let checklistItem = document.getElementById('taskChecklist').value.trim();\r\n\r\n        clearChecklistErrors();\r\n\r\n        if (checklistItem === '') {\r\n            setChecklistError(true);\r\n            setChecklistHelperText('Checklist item cannot be blank');\r\n        } else if (checklistItem.length > 500) {\r\n            setChecklistError(true);\r\n            setChecklistHelperText('Checklist item must be less than 500 characters');\r\n        } else {\r\n            setChecklistItems([...checklistItems, {text: checklistItem, completed: false}]);\r\n            document.getElementById('taskChecklist').value = '';\r\n        }\r\n    };\r\n\r\n    const handleChecklistItemStatusChange = (event, index) => {\r\n        let checklistItemsCopy = checklistItems.slice(0);\r\n        checklistItemsCopy[index].completed = event.target.checked;\r\n        setChecklistItems(checklistItemsCopy);\r\n    };\r\n\r\n    const handleChecklistItemDelete = (index) => {\r\n        let checklistItemsCopy = checklistItems.slice(0);\r\n        checklistItemsCopy.splice(index, 1);\r\n        setChecklistItems(checklistItemsCopy);\r\n    };\r\n\r\n    const clearState = () => {\r\n        setTitleError(false);\r\n        setTitleHelperText('');\r\n        setColumnError(false);\r\n        setColumnHelperText('');\r\n        setDescError(false);\r\n        setDescHelperText('');\r\n        setDateError(false);\r\n        setDateHelperText('');\r\n    };\r\n\r\n    const clearChecklistErrors = () => {\r\n        setChecklistError(false);\r\n        setChecklistHelperText('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup size='small'>\r\n                <Button {...props} onClick={handleClickOpen}>New task</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogContent>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Basic details\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin='dense'\r\n                                id='taskTitle'\r\n                                label='Title'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                                error={titleError}\r\n                                helperText={titleHelperText}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskDescription'\r\n                                label='Description'\r\n                                rows='5'\r\n                                variant='outlined'\r\n                                multiline\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                                error={descError}\r\n                                helperText={descHelperText}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskDueDate'\r\n                                label='Due date'\r\n                                type='date'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                                error={dateError}\r\n                                helperText={dateHelperText}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskFile'\r\n                                label='Files'\r\n                                type='file'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Checklist\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskChecklist'\r\n                                label='New checklist item'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                                style={{width: '90%'}}\r\n                                error={checklistError}\r\n                                helperText={checklistHelperText}\r\n                            />\r\n                            <IconButton onClick={handleAddChecklistItem} aria-label='add checklist item' style={{float: 'right'}}>\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        {checklistItems.length > 0 && (\r\n                            <Grid item xs={12}>\r\n                                <FormControl component='fieldset'>\r\n                                    <FormGroup>\r\n                                        {checklistItems.map((checklistItem, index) => (\r\n                                            <Grid item xs={12} key={index}>\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox defaultValue={checklistItem.completed} onClick={(event) => handleChecklistItemStatusChange(event, index)} />}\r\n                                                    label={checklistItem.text}\r\n                                                />\r\n                                                <IconButton onClick={() => handleChecklistItemDelete(index)}>\r\n                                                    <RemoveCircleOutlineIcon />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        )}\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Columns and collaborators\r\n                            </Typography>\r\n                        </Grid>\r\n                        {props.allColGroups && props.allColGroups.map((colGroup) => (\r\n                            <div key={colGroup.id} style={{width: '100%'}}>\r\n                                {columnHelperText && (\r\n                                    <Grid item xs={12}>\r\n                                        <Typography variant='caption' color='secondary'>\r\n                                            {columnHelperText}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                )}\r\n                                <Grid item xs={12}>\r\n                                    <FormControl key={colGroup.id} style={{width: '100%'}}>\r\n                                        <InputLabel id={'group-input-label-' + colGroup.id}>Column for {colGroup.data().label}</InputLabel>\r\n                                        <Select\r\n                                            id={colGroup.id}\r\n                                            fullWidth\r\n                                            defaultValue=''\r\n                                            margin='dense'\r\n                                            labelId={'group-input-label-' + colGroup.id}\r\n                                            error={columnError}\r\n                                            name='taskColumnGroup'\r\n                                        >\r\n                                            <MenuItem value=''>\r\n                                                (None)\r\n                                            </MenuItem>\r\n                                           {props.allCols && props.allCols[colGroup.id] && props.allCols[colGroup.id].map((column) => (\r\n                                               <MenuItem key={column.id} value={column.id}>\r\n                                                   {column.data().label}\r\n                                               </MenuItem>\r\n                                           ))} \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </div>\r\n                        ))}\r\n                        <Grid item xs={12}>\r\n                            <FormControl style={{width: '100%'}}>\r\n                                <InputLabel id='users-input-label'>Users</InputLabel>\r\n                                <Select\r\n                                    id=\"taskUsers\"\r\n                                    label=\"Users\"\r\n                                    multiple\r\n                                    margin='dense'\r\n                                    fullWidth\r\n                                    defaultValue={[]}\r\n                                    style={{marginTop: 12}}\r\n                                    labelId='users-input-label'\r\n                                >\r\n                                   {props.board.userRefs && props.board.userRefs.map((user) => (\r\n                                       <MenuItem key={user} value={user}>\r\n                                           {user}\r\n                                       </MenuItem>\r\n                                   ))} \r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Task relations\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskDependencies'\r\n                                label='Dependencies'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='taskDependents'\r\n                                label='Dependents'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                            />\r\n                        </Grid>\r\n                     </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color='primary'>\r\n                        Create task\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditTaskDialog;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { db } from '../../Firebase';\r\nimport firebase from '../../Firebase';\r\n\r\nfunction NewColumnDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [nameHelperText, setNameHelperText] = React.useState('');\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const columnNames = [];\r\n    for (let column of props.columns) {\r\n        columnNames.push(column.label);\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        clearState();\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        const columnName = document.getElementById('columnName').value.trim();\r\n\r\n        clearState();\r\n\r\n        if (columnName === '') {\r\n            setNameError(true);\r\n            setNameHelperText('Column name is required');\r\n        } else if (columnName.length > 50) {\r\n            setNameError(true);\r\n            setNameHelperText('Column name must be less than 50 characters');\r\n        } else if (columnNames.includes(columnName)) {\r\n            setNameError(true);\r\n            setNameHelperText('Column name is already in use');\r\n        } else {\r\n            setOpen(false);\r\n\r\n            db.runTransaction(async (t) => {\r\n                let columnGroupRef = await db.collection('boards').doc(props.boardRef.id).collection('columnGroups').doc(props.columnGroupRef.id);\r\n                let colRef = await columnGroupRef.collection('columns').add({\r\n                    label: columnName,\r\n                    taskRefs: [],        \r\n                });\r\n\r\n                let columnOrder = (await columnGroupRef.get()).data().columnOrder;\r\n                columnOrder.push(colRef.id);\r\n\r\n                await columnGroupRef.update({\r\n                    'columnOrder': columnOrder\r\n                });\r\n            }).then(result => {\r\n                db.collection('boards').doc(props.boardRef.id).collection('history').add(\r\n                    {\r\n                        user: user.email,\r\n                        colName: columnName,\r\n                        action: 4,\r\n                        timestamp: firebase.database.ServerValue\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(\"Error logging new column: \" + err);\r\n                });\r\n            });\r\n        }\r\n    };\r\n    \r\n    const clearState = () => {\r\n        setNameError(false);\r\n        setNameHelperText('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup size='small'>\r\n                <Button {...props} onClick={handleClickOpen}>New column</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>New column</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoFocus\r\n                                id='columnName'\r\n                                label='Column name'\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                margin='dense'\r\n                                InputLabelProps={{shrink: true}}\r\n                                error={nameError}\r\n                                helperText={nameHelperText}\r\n                            />\r\n                        </Grid>\r\n                     </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color='primary'>\r\n                        Create column\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewColumnDialog;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        backgroundColor: theme.palette.background.paper\r\n    },\r\n}));\r\n\r\nfunction SelectViewDialog(props) {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    let colGroups = Array.isArray(props.allColGroups) ? props.allColGroups : [];\r\n    let allCols = Array.isArray(props.allCols) ? props.allCols : [];\r\n    let colGroupDisplay = colGroups.map((colGroup, index) => {\r\n        if (allCols.length <= index) {\r\n            return {\r\n                label: colGroup.label,\r\n                id: colGroup.id,\r\n                columnNames: []\r\n            };\r\n        }\r\n        let columnNames = allCols[index].map(column => column.label);\r\n        return {\r\n            label: colGroup.label,\r\n            id: colGroup.id,\r\n            columnNames: columnNames\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <ButtonGroup size='small'>\r\n                <Button onClick={handleClickOpen}>Select view</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Select view</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={12}>\r\n                            <List className={classes.list}>\r\n                                {colGroupDisplay.map((colGroup, index) => (\r\n                                    <ListItem key={colGroup.id}>\r\n                                        <ListItemText primary={colGroup.label} secondary={colGroup.columnNames.join(', ')} />\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </Grid>\r\n                     </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectViewDialog;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\n\r\nfunction NewViewDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    \r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [nameHelperText, setNameHelperText] = React.useState('');\r\n    const [columnError, setColumnError] = React.useState(false);\r\n    const [columnHelperText, setColumnHelperText] = React.useState('');\r\n    const [columnNames, setColumnNames] = React.useState([]);\r\n\r\n    let allColGroups = Array.isArray(props.allColGroups) ? props.allColGroups : [];\r\n    let groupNames = allColGroups.map(colGroup => colGroup.label);\r\n\r\n    const handleClickOpen = () => {\r\n        clearState();\r\n        setColumnNames([]);\r\n        setOpen(true);\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const groupName = document.getElementById('newViewName').value.trim();\r\n        clearState();\r\n\r\n        if (groupName === '') {\r\n            setNameError(true);\r\n            setNameHelperText('View name cannot be blank');\r\n        } else if (groupName.length > 50) {\r\n            setNameError(true);\r\n            setNameHelperText('View name must be less than 50 characters');\r\n        } else if (groupNames.includes(groupName)) {\r\n            setNameError(true);\r\n            setNameHelperText('View name is already in use');\r\n        } else {\r\n            console.log('TODO: actually create it');\r\n        }\r\n    }\r\n\r\n    const handleAddColumn = () => {\r\n        const columnName = document.getElementById('newColumnName').value.trim();\r\n        clearColumnState();\r\n\r\n        if (columnName === '') {\r\n            setColumnError(true);\r\n            setColumnHelperText('Column name cannot be blank');\r\n        } else if (columnName.length > 50) {\r\n            setColumnError(true);\r\n            setColumnHelperText('Column name must be less than 50 characters');\r\n        } else if (columnNames.includes(columnName)) {\r\n            setColumnError(true);\r\n            setColumnHelperText('Column name is already in use');\r\n        } else {\r\n            setColumnNames([...columnNames, columnName]);\r\n            document.getElementById('newColumnName').value = '';\r\n        }\r\n    };\r\n\r\n    const handleDeleteColumn = (columnName) => {\r\n        setColumnNames(columnNames.slice(0).filter(item => item !== columnName));\r\n    }\r\n    \r\n    const clearState = () => {\r\n        setNameError(false);\r\n        setNameHelperText('');\r\n        clearColumnState();\r\n    };\r\n\r\n    const clearColumnState = () => {\r\n        setColumnError(false);\r\n        setColumnHelperText('');\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <ButtonGroup size='small'>\r\n                <Button onClick={handleClickOpen}>New view</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>New view</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Enter a name for your new view.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        id='newViewName'\r\n                        label='View name'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        InputLabelProps={{shrink: true}}\r\n                        error={nameError}\r\n                        helperText={nameHelperText}\r\n                    />\r\n                    <Divider style={{margin: 10}} />\r\n                    <DialogContentText>\r\n                        Optionally, enter a set of columns for your new view. Columns can be added, deleted, renamed, or rearranged later.\r\n                        <br /><br />\r\n                        While not required at this step, at least one column must be added to the board before any tasks can be created.\r\n                    </DialogContentText>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id='newColumnName'\r\n                                label='Column name'\r\n                                variant='outlined'\r\n                                InputLabelProps={{shrink: true}}\r\n                                error={columnError}\r\n                                helperText={columnHelperText}\r\n                                style={{width: '85%'}}\r\n                            />\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                style={{height: '100%', width: '15%'}}\r\n                                onClick={handleAddColumn}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {columnNames.length > 0 && (<>\r\n                        <Divider style={{margin: 10}} />\r\n                        <DialogContentText>\r\n                            Column names\r\n                        </DialogContentText>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                {columnNames.map(column => (\r\n                                    <Chip label={column} key={column} onDelete={() => handleDeleteColumn(column)} style={{marginLeft: 5, marginRight: 5}} />\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>)}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color='primary'>\r\n                        Create view\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewViewDialog;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\n\r\nfunction BoardUsersDialog(props) {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ButtonGroup size='small'>\r\n                <Button onClick={handleClickOpen}>Collaborators</Button>\r\n            </ButtonGroup>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Collaborators for {props.board.label}</DialogTitle>\r\n                <DialogContent>\r\n                    {props.board.owner === user.email && (\r\n                        <DialogContentText>\r\n                            As the board owner, you can add and remove users as well as change permissions from the <a href={'/board/' + props.boardRef.id + '/settings'}>board settings</a> page.\r\n                        </DialogContentText>\r\n                    )}\r\n                    <TableContainer>\r\n                        <Table size='small'>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Role</TableCell>\r\n                                    <TableCell>Email</TableCell>\r\n                                    <TableCell align='right'>Can edit</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Owner</TableCell>\r\n                                    <TableCell>\r\n                                        {props.board && <>\r\n                                            <Chip label={props.board.owner} color='primary' />\r\n                                        </>}\r\n                                    </TableCell>\r\n                                    <TableCell align='right'>\r\n                                        <Switch checked={true} disabled={true} color='primary' />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                {props.board && props.board.userRefs && <>\r\n                                    {props.board.userRefs.filter(userEmail => userEmail !== props.board.owner).map(userEmail => (\r\n                                        <TableRow key={userEmail}>\r\n                                            <TableCell>Member</TableCell>\r\n                                            <TableCell>\r\n                                                <Chip label={userEmail} color='primary' key={userEmail} variant='outlined' />\r\n                                            </TableCell>\r\n                                            <TableCell align='right'>\r\n                                                <Switch checked={false} disabled={true} color='primary' />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </>}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardUsersDialog;","import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport BoardBreadcrumbs from './BoardBreadcrumbs';\r\nimport EditTaskDialog from './EditTaskDialog';\r\nimport NewColumnDialog from './NewColumnDialog';\r\nimport SelectViewDialog from './SelectViewDialog'\r\nimport NewViewDialog from './NewViewDialog';\r\nimport BoardUsersDialog from './BoardUsersDialog';\r\n\r\nfunction BoardActions(props) {\r\n    const user = JSON.parse(localStorage.getItem('user')); // temp fix. auth.currentUser doesn't work if we navigate to this page directly, or refresh\r\n\r\n    return (\r\n        <Grid container style={{padding: '10px 10px 0px 10px'}}>\r\n            <div style={{flexGrow: 1}}>\r\n                <BoardBreadcrumbs board={props.board} />\r\n            </div>\r\n            {props.board && (\r\n                <ButtonGroup size='small'>\r\n                    {!props.lockFunctionality && <>\r\n                        <EditTaskDialog boardRef={props.boardRef} board={props.board} columns={props.columns} allColGroups={props.allColGroups} allCols={props.allCols} />\r\n                        <NewColumnDialog boardRef={props.boardRef} columnGroupRef={props.columnGroupRef} columns={props.columns}/>\r\n                        <NewViewDialog boardRef={props.boardRef} board={props.board} allColGroups={props.allColGroups} />\r\n                    </>}\r\n                    <SelectViewDialog boardRef={props.boardRef} board={props.board} allColGroups={props.allColGroups} allCols={props.allCols} />\r\n                    <ButtonGroup size='small'>\r\n                        <Button>Calendar</Button>\r\n                    </ButtonGroup>\r\n                    <BoardUsersDialog boardRef={props.boardRef} board={props.board} />\r\n                    <ButtonGroup size='small'>\r\n                        <Button href={'/board/' + props.boardRef.id + '/history'}>History</Button>\r\n                    </ButtonGroup>\r\n                    {user && props.board.owner === user.email && (\r\n                        <ButtonGroup size='small'>\r\n                            <Button href={'/board/' + props.boardRef.id + '/settings'}>Settings</Button>\r\n                        </ButtonGroup>\r\n                    )}\r\n                </ButtonGroup>\r\n            )}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default BoardActions;","import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AttachmentIcon from '@material-ui/icons/Attachment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\nimport { db } from '../../Firebase';\r\nimport firebase from '../../Firebase';\r\n\r\nfunction TaskListing(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        db.runTransaction(async (t) => {\r\n            props.boardRef.ref.collection('tasks').doc(props.taskRef.id).delete();\r\n        }).then(result => {\r\n            console.log(props.task.title)\r\n            db.collection('boards').doc(props.boardRef.id).collection('history').add(\r\n                {\r\n                    user: user.email,\r\n                    taskName: props.task.title,\r\n                    action: 8,\r\n                    timestamp: firebase.database.ServerValue\r\n                }\r\n            ).catch(err => {\r\n                console.log(\"Error logging delete task: \" + err);\r\n            });\r\n        });\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleChecklistItemStatusChange = (event, index) => {\r\n        let checklistCopy = props.task.checklist.slice(0);\r\n        checklistCopy[index].completed = event.target.checked;\r\n        props.boardRef.ref.collection('tasks').doc(props.taskRef.id).update({\r\n            checklist: checklistCopy\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' style={{marginBottom: 5}}>\r\n            <CardContent onClick={handleClickOpen} style={{cursor: 'pointer'}} className='taskListing'>\r\n                <Typography variant='h6' component='h2'>\r\n                    {props.task.title.length < 30 ? props.task.title : props.task.title.slice(0, 30) + '...'}\r\n                </Typography>\r\n                <Typography variant='body2' component='p'>\r\n                    {props.task.desc.length < 300 ? props.task.desc : props.task.desc.slice(0, 300) + '...'}\r\n                </Typography>\r\n            </CardContent>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>{props.task.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Description\r\n                            </Typography>\r\n                            <Typography variant='body2' component='p'>\r\n                                {props.task.desc !== '' ? props.task.desc : '(No description provided)'}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6' component='h2'>\r\n                                        Columns\r\n                                    </Typography>\r\n                                    {props.task.columnRefs.map(columnId => \r\n                                        <Chip key={columnId} label={props.allColumnNames[columnId]} color='primary' size='small' style={{margin: 3 + 'px'}} />\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6' component='h2'>\r\n                                        Due Date\r\n                                    </Typography>\r\n                                    <Typography variant='body2' component='p'>\r\n                                        {props.task.date === null && (\r\n                                            '(No due date)'\r\n                                        )}\r\n                                        {props.task.date !== null && (<>\r\n                                            {dateFormat(props.task.date.toDate(), 'mm/dd/yyyy')}\r\n                                            <Button variant='outlined' size='small' color='primary' style={{float: 'right'}}>View on calendar</Button>\r\n                                        </>)}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6' component='h2'>\r\n                                        Users\r\n                                    </Typography>\r\n                                    {props.task.users.length === 0 && (\r\n                                        <Typography variant='body2' component='p'>\r\n                                            (No users assigned to task)\r\n                                        </Typography>\r\n                                    )}\r\n                                    {props.task.users.length > 0 && props.task.users.map(user =>\r\n                                        <Chip key={user} label={user} color='primary' size='small' style={{margin: 3 + 'px'}} />\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Documents\r\n                            </Typography>\r\n                            <List component='nav'>\r\n                                <ListItem button>\r\n                                  <ListItemIcon>\r\n                                    <AttachmentIcon />\r\n                                  </ListItemIcon>\r\n                                  <ListItemText primary='Placeholder_Document.docx' />\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem button>\r\n                                  <ListItemIcon>\r\n                                    <AttachmentIcon />\r\n                                  </ListItemIcon>\r\n                                  <ListItemText primary='Placeholder_Document.pdf' />\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem button>\r\n                                  <ListItemIcon>\r\n                                    <AttachmentIcon />\r\n                                  </ListItemIcon>\r\n                                  <ListItemText primary='Placeholder_Document.png' />\r\n                                </ListItem>\r\n                            </List>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Checklist\r\n                            </Typography>\r\n                            {(!props.task.checklist || !Array.isArray(props.task.checklist) || props.task.checklist.length === 0) && (\r\n                                <Typography variant='body2' component='p'>\r\n                                    (No checklist items assigned to task)\r\n                                </Typography>\r\n                            )}\r\n                            {props.task.checklist && Array.isArray(props.task.checklist) && props.task.checklist.length > 0 && (\r\n                                <FormControl component='fieldset'>\r\n                                    <FormGroup>\r\n                                        {props.task.checklist.map((checklistItem, index) => (\r\n                                            <FormControlLabel\r\n                                                key={index}\r\n                                                control={<Checkbox checked={checklistItem.completed} onClick={(event) => handleChecklistItemStatusChange(event, index)} />}\r\n                                                label={checklistItem.text}\r\n                                            />\r\n                                        ))}\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n                            )}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h6' component='h2'>\r\n                                Comments\r\n                            </Typography>\r\n                            <Typography variant='body2' component='p'>\r\n                                To be designed later\r\n                            </Typography>\r\n                        </Grid>\r\n                     </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        View connected tasks\r\n                    </Button>\r\n                    {!props.lockFunctionality && <>\r\n                        <Button onClick={handleDelete} color='secondary'>\r\n                            Delete\r\n                        </Button>\r\n                        <Button onClick={handleClose}>\r\n                            Edit\r\n                        </Button>\r\n                    </>}\r\n                    <Button onClick={handleClose} color='primary'>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Card>\r\n    );\r\n    }\r\n\r\nexport default TaskListing;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { db } from '../../Firebase';\r\nimport firebase from '../../Firebase';\r\n\r\nfunction EditColumnDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [nameHelperText, setNameHelperText] = React.useState('');\r\n    const [deleteDisable, setDeleteDisable] = React.useState(true);\r\n    \r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const columnNames = [];\r\n    for (let column of props.columns) {\r\n        columnNames.push(column.label);\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        clearState();\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSubmitChanges = () => {\r\n        const columnName = document.getElementById('columnName').value.trim();\r\n\r\n        clearState();\r\n\r\n        if (columnName === '') {\r\n            setNameError(true);\r\n            setNameHelperText('Column name is required');\r\n        } else if (columnName.length > 50) {\r\n            setNameError(true);\r\n            setNameHelperText('Column name must be less than 50 characters');\r\n        } else if (columnNames.includes(columnName) && columnName !== props.column.label) {\r\n            setNameError(true);\r\n            setNameHelperText('Column name is already in use');\r\n        } else {\r\n            setOpen(false);\r\n\r\n            db.collection('boards').doc(props.boardRef.id).collection('columnGroups').doc(props.columnGroupRef.id).collection('columns').doc(props.column.id).update({\r\n                label: columnName\r\n            }).then(result => {\r\n                db.collection('boards').doc(props.boardRef.id).collection('history').add(\r\n                    {\r\n                        user: user.email,\r\n                        colName: columnName,\r\n                        action: 5,\r\n                        timestamp: firebase.database.ServerValue\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(\"Error logging edit column: \" + err);\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSubmitDelete = () => {\r\n        const verifyName = document.getElementById('columnDeleteConfirmation').value;\r\n        if (verifyName === props.column.label) {\r\n            setOpen(false);\r\n\r\n            db.runTransaction(async (t) => {\r\n                const colGroup = await db.collection('boards').doc(props.boardRef.id).collection('columnGroups').doc(props.columnGroupRef.id);\r\n                let columnOrder = (await colGroup.get()).data().columnOrder.filter(colRef => colRef !== props.column.id);\r\n\r\n                props.column.taskRefs.forEach(async (taskId) => {\r\n                    const taskRef = db.collection('boards').doc(props.boardRef.id).collection('tasks').doc(taskId);\r\n                    let columnRefs = (await taskRef.get()).data().columnRefs;\r\n\r\n                    // If this task is only in this column, delete it. Otherwise, just remove this column from its list.\r\n                    if (columnRefs.length === 1) {\r\n                        taskRef.delete();\r\n                    } else {\r\n                        taskRef.update({\r\n                            columnRefs: columnRefs.filter(columnRef => columnRef !== props.column.id)\r\n                        });\r\n                    }\r\n                });\r\n                \r\n                await colGroup.collection('columns').doc(props.column.id).delete();\r\n\r\n                await colGroup.update({\r\n                    'columnOrder': columnOrder\r\n                });\r\n            }).then(result => {\r\n                db.collection('boards').doc(props.boardRef.id).collection('history').add(\r\n                    {\r\n                        user: user.email,\r\n                        colName: props.column.label,\r\n                        action: 6,\r\n                        timestamp: firebase.database.ServerValue\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(\"Error logging delete column: \" + err);\r\n                });\r\n            });\r\n        }\r\n    };\r\n    \r\n    const clearState = () => {\r\n        setNameError(false);\r\n        setNameHelperText('');\r\n    };\r\n\r\n    const inputListener = (event) => {\r\n        if (event.target.value === props.column.label) {\r\n            setDeleteDisable(false);\r\n        } else {\r\n            setDeleteDisable(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{display: 'inline'}}>\r\n            <IconButton\r\n                edge='end'\r\n                aria-label='edit column'\r\n                color='inherit'\r\n                onClick={handleClickOpen}>\r\n                <EditIcon />\r\n            </IconButton>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Edit column</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin='dense'\r\n                        id='columnName'\r\n                        label='Rename column'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        InputLabelProps={{shrink: true}} \r\n                        error={nameError}\r\n                        helperText={nameHelperText}\r\n                        defaultValue={props.column.label}\r\n                    />\r\n                    <Divider style={{margin: 10}} />\r\n                    <DialogContentText>\r\n                        Type the name of the column to confirm deletion.<br /><br />Warning: this cannot be undone. Any tasks associated with only this column will be lost.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        margin='dense'\r\n                        id='columnDeleteConfirmation'\r\n                        label='Column name confirmation'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        color='secondary'\r\n                        onChange={inputListener}\r\n                        InputLabelProps={{shrink: true}}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmitDelete} disabled={deleteDisable} color='secondary'>\r\n                        Delete column\r\n                    </Button>\r\n                    <Button onClick={handleSubmitChanges} color='primary'>\r\n                        Save changes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditColumnDialog;","import React from 'react';\r\n\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TaskListing from './TaskListing'\r\nimport EditColumnDialog from './EditColumnDialog';\r\n\r\nfunction Column(props) {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const columnTaskRefs = props.column.taskRefs || [];\r\n    const taskRefs = props.taskRefs.filter(taskRef => columnTaskRefs.includes(taskRef.id));\r\n\r\n    if (props.sortMode === 'titleAsc') {\r\n        taskRefs.sort((a, b) => a.data().title.localeCompare(b.data().title));\r\n    } else if (props.sortMode === 'titleDesc') {\r\n        taskRefs.sort((a, b) => b.data().title.localeCompare(a.data().title));\r\n    } else if (props.sortMode === 'date') {\r\n        taskRefs.sort((a, b) => {\r\n            const dateA = a.data().date;\r\n            const dateB = b.data().date;\r\n            if (dateA === null && dateB === null) {\r\n                return a.data().title.localeCompare(b.data().title);\r\n            }\r\n            if (dateA === null) {\r\n                return 1;\r\n            }\r\n            if (dateB === null) {\r\n                return -1;\r\n            }\r\n            if (dateA.toDate().getTime() === dateB.toDate().getTime()) {\r\n                return a.data().title.localeCompare(b.data().title);\r\n            }\r\n            return dateA.toDate().getTime() - dateB.toDate().getTime();\r\n        });\r\n    } else if (props.sortMode === 'users') {\r\n        taskRefs.sort((a, b) => {\r\n            const userInA = a.data().users.includes(user.email);\r\n            const userInB = b.data().users.includes(user.email);\r\n            if (userInA === userInB) {\r\n                return a.data().title.localeCompare(b.data().title);\r\n            }\r\n            return userInA ? -1 : 1;\r\n        });\r\n    } else {\r\n        taskRefs.sort((a, b) => columnTaskRefs.indexOf(a.id) - columnTaskRefs.indexOf(b.id));\r\n    }\r\n\r\n    return (\r\n        <GridListTile style={{margin: 5, width: 300}}>\r\n            <Typography variant='h6' color='inherit'>\r\n                {props.column.label}\r\n                {!props.lockFunctionality && (\r\n                    <EditColumnDialog column={props.column} columns={props.columns} boardRef={props.boardRef} columnGroupRef={props.columnGroupRef} />\r\n                )}\r\n            </Typography>\r\n            <div style={{overflow: 'auto', height: '800px'}}> {/*yeah I know, this is very very bad. css is awful to work with, this height definition needs to be fixed*/}\r\n                {taskRefs.map(taskRef => (\r\n                    <TaskListing\r\n                        boardRef={props.boardRef}\r\n                        key={taskRef.id}\r\n                        taskRef={taskRef}\r\n                        task={taskRef.data()}\r\n                        allColumnNames={props.allColumnNames}\r\n                        lockFunctionality={props.lockFunctionality}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </GridListTile>\r\n    );\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\n\r\nimport GridList from '@material-ui/core/GridList';\r\n\r\nimport Column from './Column.js';\r\n\r\nfunction ColumnGroup(props) {\r\n    const columnRefs = props.columnGroup ? props.columnGroup.columnOrder : [];\r\n    const columns = props.columns.filter(column => columnRefs.includes(column.id));\r\n    columns.sort((a, b) => columnRefs.indexOf(a.id) - columnRefs.indexOf(b.id));\r\n\r\n    let allColumnNames = {};\r\n    for (let i = 0; i < props.allCols.length; i++) {\r\n        for (let j = 0; j < props.allCols[i].length; j++) {\r\n            let item = props.allCols[i][j];\r\n            allColumnNames[item.id] = item.label;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{maxWidth: 'calc(100% - 10px - 10px)', height: 100 + '%', padding: '10px 10px 0px 10px', display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around', overflow: 'hidden', float: 'left'}}>\r\n            <GridList style={{flexWrap: 'nowrap'}}>\r\n                {columns.map(column => (\r\n                    <Column\r\n                        key={column.label}\r\n                        column={column}\r\n                        columns={columns}\r\n                        boardRef={props.boardRef}\r\n                        columnGroupRef={props.columnGroupRef}\r\n                        taskRefs={props.taskRefs.filter((task) => task.data().columnRefs.includes(column.id))}\r\n                        allColumnNames={allColumnNames}\r\n                        lockFunctionality={props.lockFunctionality}\r\n                        sortMode={props.sortMode}\r\n                    />\r\n                ))}\r\n            </GridList>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default ColumnGroup;","import React from 'react';\r\n\r\nimport BoardActions from '../component/BoardActions';\r\nimport ColumnGroup from '../component/ColumnGroup';\r\n\r\nimport { cache } from '../../Firebase';\r\n\r\n\r\nclass Board extends React.Component {\r\n\r\n    boardSub;\r\n    colGroupSub;\r\n    colGroupsSub;\r\n    colSub;\r\n    columnsSub = [];\r\n    taskSub;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            taskRefs: {},\r\n            allColumns: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadBoard();\r\n    }\r\n\r\n    // Load board based on boardID, then load column group\r\n    loadBoard() {\r\n        this.boardSub = cache.loadBoard(this.props.boardId).subscribe((boardRef) => {\r\n            if (!boardRef.exists) {\r\n                this.props.history.push('/boards');\r\n            } else {\r\n                this.setState({boardRef: boardRef});\r\n                this.loadColGroup(boardRef);\r\n                this.loadTasks(boardRef);\r\n                this.loadAllColGroups(boardRef);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Load column group, then load columns\r\n    loadColGroup(boardRef, colGroup=null) {\r\n        // If there is already a subscription, unsubscribe\r\n        if(this.colGroupSub) {\r\n            this.colGroupSub.unsubscribe();\r\n        }\r\n        const collection = boardRef.ref.collection(\"columnGroups\");\r\n\r\n        // If a parameter was supplied to the function use it, otherwise use default\r\n        colGroup = colGroup || boardRef.data().defaultColumnGroup;\r\n\r\n        // If a default is set (not \"\"), then use it\r\n        if(colGroup.length) {\r\n            this.colGroupSub = cache.loadColumnGroup(boardRef, colGroup).subscribe((colGroupRef) => {\r\n                this.setState({colGroupRef: colGroupRef});\r\n                this.loadColumns(colGroupRef);\r\n            });\r\n        // Otherwise just grab the first colGroup\r\n        } else {\r\n            this.colGroupSub = collection.limit(1).onSnapshot((colGroupRef) => {\r\n                this.setState({colGroupRef: colGroupRef.docs[0]});\r\n                this.loadColumns(colGroupRef.docs[0]);\r\n            });\r\n        }\r\n    }\r\n\r\n    loadAllColGroups(boardRef) {\r\n        this.colGroupsSub = boardRef.ref.collection(\"columnGroups\").onSnapshot((colGroupRefs) => {\r\n            this.setState({colGroups: colGroupRefs.docs});\r\n            this.loadAllColumns(colGroupRefs);\r\n        });\r\n    }\r\n\r\n    loadAllColumns(colGroupRefs) {\r\n        colGroupRefs.forEach((colGroupRef) => {\r\n            this.columnsSub.push(colGroupRef.ref.collection(\"columns\").onSnapshot((columnRefs) => {\r\n                let copy = Object.assign({}, this.state.allColumns);\r\n                copy[colGroupRef.id] = columnRefs.docs;\r\n                this.setState({allColumns: copy});\r\n                console.log(this.state.allColumns);\r\n            }));\r\n        });\r\n    }\r\n\r\n    loadColumns(colGroupRef=null) {\r\n        if (this.colSub) {\r\n            this.colSub.unsubscribe();\r\n        }\r\n\r\n        this.colSub = cache.loadColumns(colGroupRef || this.state.colGroupRef).subscribe((columnRefs) => {\r\n            this.setState({columnRefs: columnRefs.docs})\r\n        });\r\n    }\r\n\r\n    loadTasks(boardRef) {\r\n        if (this.taskSub) {\r\n            this.taskSub.unsubscribe();\r\n        }\r\n\r\n        this.taskSub = cache.loadTasks(boardRef).subscribe((taskRefs) => {\r\n            this.setState({taskRefs: taskRefs.docs})\r\n        });\r\n    }\r\n\r\n    // When the component is destroyed, unsubscribe from all subscriptions\r\n    componentWillUnmount() {\r\n        this.boardSub && this.boardSub.unsubscribe();\r\n        this.colSub && this.colSub.unsubscribe();\r\n        this.colGroupSub && this.colGroupSub.unsubscribe();\r\n        this.taskSub && this.taskSub.unsubscribe();\r\n        this.colGroupsSub && this.colGroupsSub();\r\n        this.columnsSub.forEach(sub => sub());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BoardActions\r\n                    boardRef={this.state.boardRef ? this.state.boardRef : {}}\r\n                    board={this.state.boardRef ? this.state.boardRef.data() : {}}\r\n                    columnGroupRef={this.state.colGroupRef ? this.state.colGroupRef : {}}\r\n                    columns={this.state.columnRefs ? this.state.columnRefs.map((c) => {\r\n                        let data = c.data();\r\n                        data.id = c.id;\r\n                        return data;\r\n                    }) : []} /* Map the column references to actual columns */\r\n                    allColGroups={this.state.colGroups ? this.state.colGroups : []}\r\n                    allCols={this.state.allColumns ? this.state.allColumns : {}}\r\n                    lockFunctionality={this.props.lockFunctionality}\r\n                />\r\n                <ColumnGroup\r\n                    boardRef={this.state.boardRef ? this.state.boardRef : {}}\r\n                    columnGroupRef={this.state.colGroupRef ? this.state.colGroupRef : {}}\r\n                    columns={this.state.columnRefs ? this.state.columnRefs.map((c) => {\r\n                        let data = c.data();\r\n                        data.id = c.id;\r\n                        return data;\r\n                    }) : []} /* Map the column references to actual columns */\r\n                    columnGroup={this.state.colGroupRef ? this.state.colGroupRef.data() : {}} \r\n                    taskRefs={this.state.taskRefs}\r\n                    allCols={this.state.allColumns ? this.state.allColumns : {}}\r\n                    lockFunctionality={this.props.lockFunctionality}\r\n                    sortMode={this.props.sortMode}\r\n                />\r\n            </div>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport Board from './pageBody/Board';\r\n\r\nimport firebase from '../Firebase';\r\n\r\nexport default (props) => {\r\n    const viewableHistory = createBrowserHistory();\r\n    const history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const db = firebase.firestore();\r\n    db.collection('boards').where('userRefs', 'array-contains', user.email).get().then(snapshot => {\r\n        for (const doc of snapshot.docs) {\r\n            if (doc.id === props.match.params.boardId) {\r\n                return;\r\n            }\r\n        }\r\n        history.push('/boards');\r\n    }).catch(err => {\r\n        history.push('/boards');\r\n    });\r\n\r\n    // Check if we have the query param for sorting\r\n    let sortMode = null;\r\n    if (viewableHistory.location.search && viewableHistory.location.search.startsWith('?sort=')) {\r\n        sortMode = viewableHistory.location.search.substring(6);\r\n        if (!['titleAsc', 'titleDesc', 'date', 'users'].includes(sortMode)) {\r\n            sortMode = null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar location={viewableHistory.location.pathname} sortMode={sortMode} />\r\n            <Board history={history} boardId={props.match.params.boardId} sortMode={sortMode} lockFunctionality={sortMode !== null} />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction BoardSubpageBreadcrumbs(props) {\r\n    return (\r\n        <Grid container style={{padding: '10px 10px 0px 10px'}}>\r\n            <Breadcrumbs aria-label='breadcrumbs'>\r\n                <Link color='inherit' href='/boards'>\r\n                    Boards\r\n                </Link>\r\n                <Link color='inherit' href={'/board/' + props.board.id}>\r\n                    {props.board.label}\r\n                </Link>\r\n                <Typography color='textPrimary'>\r\n                    {props.currentPageName}\r\n                </Typography>\r\n            </Breadcrumbs>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default BoardSubpageBreadcrumbs;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport firebase from '../../Firebase';\r\nimport { db } from '../../Firebase';\r\n\r\n\r\nfunction DeleteBoardDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [deleteDisable, setDeleteDisable] = React.useState(true);\r\n    const history = useHistory();\r\n\r\n    const handleClickOpen = () => {\r\n        setDeleteDisable(true);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDeleteBoard = (boardName) => {\r\n        setOpen(false);\r\n        if (boardName === props.board.label) {\r\n            const boardId = props.board.id;\r\n            const boardRef = db.collection(\"boards\").doc(boardId).path;\r\n            const recursiveDelete = firebase.functions().httpsCallable('recursiveDelete');\r\n            recursiveDelete({path: boardRef}).then(result => {\r\n                history.push(\"/boards\")\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    }\r\n\r\n    const inputListener = (event) => {\r\n        if (event.target.value === props.board.label) {\r\n            setDeleteDisable(false);\r\n        } else {\r\n            setDeleteDisable(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={handleClickOpen} variant='contained' color='secondary'>Delete board</Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Delete board</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                    Type the board name to confirm deletion of the board.<br /><br />\r\n                    Warning: this cannot be undone.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        onChange={inputListener}\r\n                        autoFocus\r\n                        margin='dense'\r\n                        id='confirmDeleteBoard'\r\n                        label='Board name'\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        color='secondary'\r\n                        InputLabelProps={{shrink: true}} \r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => handleDeleteBoard(document.getElementById(\"confirmDeleteBoard\").value)}\r\n                        color='secondary'\r\n                        disabled={deleteDisable}\r\n                    >\r\n                        Delete board\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteBoardDialog;","import '../../App.css';\r\nimport React from 'react';\r\n\r\nimport DeleteBoardDialog from './DeleteBoardDialog.js';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport firebase from '../../Firebase';\r\nimport { db, auth } from '../../Firebase';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    settingsBody: {\r\n        flexGrow: 1,\r\n        padding: 20,\r\n        paddingRight: 200,\r\n        paddingLeft: 200\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        marginRight: 5,\r\n        marginLeft: 5\r\n    },\r\n    textField: {\r\n        width: 80 + '%'\r\n    },\r\n    chip: {\r\n        marginRight: 5,\r\n        marginLeft: 5\r\n    }\r\n}));\r\n\r\nfunction BoardSettings(props) {\r\n    const classes = useStyles();\r\n\r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [nameHelperText, setNameHelperText] = React.useState('');\r\n    const [descriptionError, setDescriptionError] = React.useState(false);\r\n    const [descriptionHelperText, setDescriptionHelperText] = React.useState('');\r\n    const [successSnackbar, setSuccessSnackbar] = React.useState(false);\r\n    const [errorSnackbar, setErrorSnackbar] = React.useState(false);\r\n    const [inviteEmailError, setInviteEmailError] = React.useState(false);\r\n    const [inviteEmailHelperText, setInviteEmailHelperText] = React.useState('');\r\n    const [successMessage, setSuccessMessage] = React.useState('');\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const regexp = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    const handleSettingsSubmit = () => {\r\n        clearState();\r\n        if (!props.board) {\r\n            return; // sanity check\r\n        }\r\n        const name = document.getElementById('boardName').value.trim();\r\n        const description = document.getElementById('boardDescription').value.trim();\r\n\r\n        if (name === '') {\r\n            setNameError(true);\r\n            setNameHelperText('Board name cannot be empty!');\r\n        } else if (name.length > 50) {\r\n            setNameError(true);\r\n            setNameHelperText('Board name must be less than 50 characters long!');\r\n        } else if (description.length > 150) {\r\n            setDescriptionError(true);\r\n            setDescriptionHelperText('Board description must be less than 150 characters long!');\r\n        } else if (description === '') {\r\n            setDescriptionError(true);\r\n            setDescriptionHelperText('Board description cannot be empty!');\r\n        } else {\r\n            db.collection('boards').doc(props.board.id).update(\r\n                {\r\n                    label: name,\r\n                    description: description\r\n                }\r\n            ).then(result => {\r\n                db.collection('boards').doc(props.board.id).collection('history').add(\r\n                    {\r\n                        user: user.email,\r\n                        action: 1,\r\n                        timestamp: firebase.database.ServerValue\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(\"Error logging board update: \" + err);\r\n                });\r\n            }).catch(err => {\r\n                setErrorSnackbar(true);\r\n                console.log(err);\r\n                return;\r\n            });\r\n            setSuccessMessage('Successfully saved board details!')\r\n            setSuccessSnackbar(true);\r\n        }\r\n    };\r\n\r\n    const inviteUser = (email) => {\r\n        clearState();\r\n        if (email === '') {\r\n            setInviteEmailError(true);\r\n            setInviteEmailHelperText('Email is required');\r\n        } else if (!regexp.test(email)) {\r\n            setInviteEmailError(true);\r\n            setInviteEmailHelperText('Email must be properly formatted');\r\n        } else {\r\n            auth.fetchSignInMethodsForEmail(email).then(result => {\r\n                if (result.length >= 1) {\r\n                    db.collection('boards').doc(props.board.id).update({\r\n                        userRefs: firebase.firestore.FieldValue.arrayUnion(email)\r\n                    }).then(result => {\r\n                        document.getElementById('inviteEmail').value = ''\r\n                        setSuccessSnackbar(true);\r\n                        setSuccessMessage('Successfully invited ' + email + '!');\r\n                    }).catch(err => {\r\n                        console.log(err);\r\n                    });\r\n                } else if (result.length === 0) {\r\n                    setInviteEmailError(true);\r\n                    setInviteEmailHelperText('User does not exist!');\r\n                }\r\n            }).then(result => {\r\n                db.collection('boards').doc(props.board.id).collection('history').add(\r\n                    {\r\n                        user: user.email,\r\n                        user2: email,\r\n                        action: 2,\r\n                        timestamp: firebase.database.ServerValue\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(\"Error logging inviting user: \" + err);\r\n                });\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    };\r\n\r\n    const deleteUser = (email) => {\r\n        db.collection('boards').doc(props.board.id).update({\r\n            userRefs: firebase.firestore.FieldValue.arrayRemove(email)\r\n        }).then(result => {\r\n            setSuccessSnackbar(true);\r\n            setSuccessMessage('Successfully removed ' + email + '!');\r\n            db.collection('boards').doc(props.board.id).collection('history').add(\r\n                {\r\n                    user: user.email,\r\n                    user2: email,\r\n                    action: 3,\r\n                    timestamp: firebase.database.ServerValue\r\n                }\r\n            ).catch(err => {\r\n                console.log(\"Error logging removing user: \" + err);\r\n            });\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    function clearState() {\r\n        setNameError(false);\r\n        setNameHelperText('');\r\n        setDescriptionError(false);\r\n        setDescriptionHelperText('');\r\n        setSuccessSnackbar(false);\r\n        setErrorSnackbar(false);\r\n        setInviteEmailError(false);\r\n        setInviteEmailHelperText('');\r\n    }\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setErrorSnackbar(false);\r\n        setSuccessSnackbar(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.settingsBody}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <h2>Board Details</h2>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField id='boardName' label='Name' error={nameError} helperText={nameHelperText} variant='outlined' className={classes.textField} InputLabelProps={{shrink: true}} key={props.board.label} defaultValue={props.board.label} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField id='boardDescription' label='Description (optional)' error={descriptionError} helperText={descriptionHelperText} variant='outlined' className={classes.textField} multiline rows={5} InputLabelProps={{shrink: true}} key={props.board.description} defaultValue={props.board.description} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button variant='contained' color='primary' onClick={handleSettingsSubmit}>Save changes</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <h2>Collaborators</h2>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField id='inviteEmail' error={inviteEmailError} helperText={inviteEmailHelperText} label='Add a user by email address' type='email' variant='outlined' className={classes.textField} style={{width: 70 + '%'}}/>\r\n                        <Button variant='contained' color='primary' style={{height: 100 + '%', width: 10 + '%'}} onClick={() => inviteUser(document.getElementById('inviteEmail').value.trim())} >Add user</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer style={{width: '80%', marginRight: 'auto', marginLeft: 'auto'}}>\r\n                            <Table size='small'>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Role</TableCell>\r\n                                        <TableCell>Email</TableCell>\r\n                                        <TableCell align='right'>Can edit</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>Owner</TableCell>\r\n                                        <TableCell>\r\n                                            {props.board && <>\r\n                                                <Chip label={props.board.owner} color='primary' className={classes.chip} />\r\n                                            </>}\r\n                                        </TableCell>\r\n                                        <TableCell align='right'>\r\n                                            <Switch checked={true} disabled={true} color='primary' />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    {props.board && props.board.userRefs && <>\r\n                                        {props.board.userRefs.filter(userEmail => userEmail !== props.board.owner).map(userEmail => <>\r\n                                            <TableRow>\r\n                                                <TableCell>Member</TableCell>\r\n                                                <TableCell>\r\n                                                    <Chip label={userEmail} color='primary' key={userEmail} className={classes.chip} variant='outlined' onDelete={() => deleteUser(userEmail)} />\r\n                                                </TableCell>\r\n                                                <TableCell align='right'>\r\n                                                    <Switch checked={true} color='primary' />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </>)}\r\n                                    </>}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <h2>Here be dragons</h2>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <DeleteBoardDialog board={props.board}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Snackbar open={successSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='success'>\r\n                    {successMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={errorSnackbar} onClose={handleClose}>\r\n                <Alert onClose={handleClose} autoHideDuration={6000} severity='success'>\r\n                    There was an error saving board details!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardSettings;","import React from 'react';\r\n\r\nimport BoardSubpageBreadcrumbs from '../component/BoardSubpageBreadcrumbs';\r\nimport BoardSettingsComponent from '../component/BoardSettings';\r\n\r\nimport { db } from '../../Firebase';\r\n\r\nclass BoardSettings extends React.Component {\r\n\r\n    boardSub;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.loadBoard();\r\n    }\r\n\r\n    loadBoard() {\r\n        if (this.boardSub) {\r\n            this.boardSub();\r\n        }\r\n        \r\n        this.boardSub = db.collection('boards').doc(this.props.boardId).onSnapshot((boardRef) => {\r\n            let data = boardRef.data();\r\n\r\n            // fix for erroring on board delete\r\n            if (data === undefined) {\r\n                return;\r\n            }\r\n            \r\n            data.id = boardRef.id;\r\n            this.setState({board: data});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.boardSub && this.boardSub();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BoardSubpageBreadcrumbs currentPageName='Settings' board={this.state.board ? this.state.board : {}} />\r\n                <BoardSettingsComponent board={this.state.board ? this.state.board : {}} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardSettings;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport BoardSettings from './pageBody/BoardSettings';\r\n\r\nimport { db } from '../Firebase';\r\n\r\nclass BoardSettingsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.viewableHistory = createBrowserHistory();\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n        db.collection('boards').doc(props.match.params.boardId).get().then(boardRef => {\r\n            if (!boardRef.exists || boardRef.data().owner !== user.email) {\r\n                this.props.history.push('/boards');\r\n            }\r\n        }).catch(err => {\r\n            this.props.history.push('/boards');\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar location={this.viewableHistory.location.pathname}  />\r\n                <BoardSettings boardId={this.props.match.params.boardId} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BoardSettingsPage;","import React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MaterialTable from 'material-table';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    settingsBody: {\r\n        flexGrow: 1,\r\n        padding: 20,\r\n        paddingRight: 200,\r\n        paddingLeft: 200\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        marginRight: 5,\r\n        marginLeft: 5\r\n    },\r\n    textField: {\r\n        width: 80 + '%'\r\n    },\r\n    chip: {\r\n        marginRight: 5,\r\n        marginLeft: 5\r\n    }\r\n}));\r\n\r\nfunction BoardSettings(props) {\r\n    const classes = useStyles();\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Date',\r\n            field: 'PLACEHOLDER'\r\n        },\r\n        {\r\n            title: 'User',\r\n            field: 'PLACEHOLDER'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            field: 'PLACEHOLDER'\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div className={classes.settingsBody}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <h2>Board History</h2>\r\n                        <MaterialTable icons={tableIcons} columns={columns} title='' />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardSettings;","import React from 'react';\r\n\r\nimport BoardSubpageBreadcrumbs from '../component/BoardSubpageBreadcrumbs';\r\nimport BoardHistoryComponent from '../component/BoardHistoryComponent';\r\n\r\nimport { db } from '../../Firebase';\r\n\r\nclass BoardHistory extends React.Component {\r\n\r\n    boardSub;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.loadBoard();\r\n    }\r\n\r\n    loadBoard() {\r\n        if (this.boardSub) {\r\n            this.boardSub();\r\n        }\r\n        \r\n        this.boardSub = db.collection('boards').doc(this.props.boardId).onSnapshot((boardRef) => {\r\n            let data = boardRef.data();\r\n            data.id = boardRef.id;\r\n            this.setState({board: data});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.boardSub && this.boardSub();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BoardSubpageBreadcrumbs currentPageName='History' board={this.state.board ? this.state.board : {}} />\r\n                <BoardHistoryComponent board={this.state.board} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardHistory;","import React from 'react';\r\nimport { createBrowserHistory } from 'history';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport NavBar from './component/NavBar';\r\nimport BoardHistory from './pageBody/BoardHistory';\r\n\r\nimport firebase from '../Firebase';\r\n\r\nexport default (props) => {\r\n    const viewableHistory = createBrowserHistory();\r\n    const history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const db = firebase.firestore();\r\n    db.collection('boards').where('userRefs', 'array-contains', user.email).get().then(snapshot => {\r\n        for (const doc of snapshot.docs) {\r\n            if (doc.id === props.match.params.boardId) {\r\n                return;\r\n            }\r\n        }\r\n        history.push('/boards');\r\n    }).catch(err => {\r\n        history.push('/boards');\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <NavBar location={viewableHistory.location.pathname}  />\r\n            <BoardHistory boardId={props.match.params.boardId} />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n  } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\n// Pages\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport Boards from './pages/Boards';\r\nimport Board from './pages/Board';\r\nimport BoardSettings from './pages/BoardSettings';\r\nimport BoardHistory from './pages/BoardHistory';\r\n\r\n// Used to ensure users must log in\r\nclass ProtectedRoute extends React.Component {\r\n    render() {\r\n        const { component: Component, ...props } = this.props;\r\n        return (\r\n            <Route \r\n                {...props} \r\n                render={props => (\r\n                    localStorage.getItem('user') !== null ?\r\n                    <Component {...props} /> :\r\n                    <Redirect to='/login' />\r\n                )} \r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n// Used to keep logged in users off the login/register pages\r\nclass RedirectRoute extends React.Component {\r\n    render() {\r\n        const { component: Component, ...props } = this.props;\r\n        return (\r\n            <Route \r\n                {...props} \r\n                render={props => (\r\n                    localStorage.getItem('user') === null ?\r\n                    <Component {...props} /> :\r\n                    <Redirect to='/boards' />\r\n                )} \r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <RedirectRoute path='/login' component={Login} />\r\n                <RedirectRoute path='/register' component={Register} />\r\n                <ProtectedRoute path='/boards' component={Boards} />\r\n                <ProtectedRoute path='/board/:boardId/settings' component={BoardSettings} />\r\n                <ProtectedRoute path='/board/:boardId/history' component={BoardHistory} />\r\n                <ProtectedRoute path='/board/:boardId' component={Board} />\r\n                <Route path='/'>\r\n                    <Redirect to='/login' />\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}